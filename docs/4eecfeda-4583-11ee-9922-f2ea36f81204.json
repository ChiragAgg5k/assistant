{"page_content": "[{\"level\": 1, \"title\": \" Deployment \", \"body\": [\" Appwrite Functions are mini-applications in Appwrite with their own endpoints. Each function can have many deployments, which can be thought of as versions of the mini-application.\", \" Functions can be created and deployed in different ways to meet your unique development habits. You can automatically deploy Appwrite Functions from source control, build your own deployment pipelines using the Appwrite CLI, or upload code files manually. Here's everything you need to know to deploy your first Appwrite Function.\"]}, {\"level\": 2, \"title\": \"Git\", \"body\": [\" The recommended way to manage your Appwrite Function deployments is to use a version control system, like Git. This offers simple versioning and collaboration that will easily fit into the rest of your development workflow.\"]}, {\"level\": 3, \"title\": \"Create Function\", \"body\": [\"Before deploying your function with Git, create a new function attached to your Git repo.\", \"  Navigate to Functions from the side bar of the Appwrite Console.   Click Create function.   When asked to Choose your source, under Connect Git repository, select your provider.   Search for the Git repository that hold your function and click connect.   Select a production branch. New commits pushed to the production branch will be automatically activated. Commits to any other branch will still be deployed, but not be activated.   Input the root directory of the function inside the repository. If you have only one function in your repository, you can leave this empty. If you have multiple, root directory should point to the folder of your function. This should be the directory in which your custom build commands can run successfully. It also improves efficiency because only what's necessary is cloned.   If you don't want deploy comments to be made on your pull requests or commits, select Silent mode.   Name your function, select a runtime that matches your function, and enter entrypoint, relative to the root directory from the previous step. Entrypoint is path to the main file of your function, which exports the function to be run on every execution.   If you have build steps, like installing dependencies, input the commands into the Build settings heading's Command field. You can combine multiple commands using &&, such as npm install && npm build. For compiled languages you don't need to worry about installing dependencies, as that's done automatically during compilation step.   Finally, configure the execute permissions of the function. For security, only provide execute permissions to the necessary roles. \"]}, {\"level\": 3, \"title\": \"Deploy\", \"body\": [\"  Using Git, checkout the branch you configured as production branch when creating the Appwrite Function.   Create a new commit.   Push your new commit.   A new deployment will be automatically created, built and activated. \"]}, {\"level\": 2, \"title\": \"CLI\", \"body\": [\" CLI Setup Before you can deploy with the Appwrite CLI, make sure you've installed and initialized the CLI.\", \" To deploy with the Appwrite CLI, your function must be added to appwrite.json that tells the CLI where each function is stored. To ensure the folder structure is setup correctly and appwrite.json is configured correctly, use the appwrite init function method to create a starter function, then paste in your function code.\", \" Run the following command in the folder holding the appwrite.json file. \", \" appwrite init function\", \" Give your function a name and choose your runtime. This will create a new starter function in the current directory and also add it to your appwrite.json file.\", \" Edit the automatically generated code and add dependencies to the dependency files of your language or framework. Then, deploy the function using the following command.\", \" appwrite deploy function\", \" Overwrite Warning  If you made changes in the Appwrite Console that is different from your appwrite.json, using the CLI deploy command will overwrite your console changes, such as execution schedule or permissions. Update your appwrite.json manually before deploying to avoid overwriting changes. \"]}, {\"level\": 3, \"title\": \"Manual Deployment\", \"body\": [\"You can upload your functions to be deployed using the Appwrite Console. The example below shows a simple Node.js function, but the same idea applies to any other language.\", \" .\\n\\u251c\\u2500\\u2500 package.json\\n\\u2514\\u2500\\u2500 index.js\\n\", \"First, navigate inside the folder that contains your dependency file. Package your code files into the .tar.gz format with this tar command:\", \"  Unix  tar --exclude code.tar.gz -czf code.tar.gz .    CMD  tar --exclude code.tar.gz -czf code.tar.gz .    PowerShell  tar --exclude code.tar.gz -czf code.tar.gz .  \", \"Next, navigate to your Appwrite Console and upload the function.\", \" Navigate to the function you want to deploy. Click  Create deployment. Select the Manual tab. Input the entry point of your function under Entrypoint. For the example above, it would be index.js. Upload  code.tar.gz. Select Activate deployment after build to use your new deployment. Click Create to deploy your function.\"]}, {\"level\": 2, \"title\": \"Domains\", \"body\": [\" Each deployed function can have its own domain. By default, one is generated for each of your functions. You can find the generated domain for your function like this.\", \" Navigate to the Appwrite Console's Functions page. Navigate to the Domains tab. In the table, you'll find a link formatted similar to https://64d4d22db370ae41a32e.appwrite.global. This is your generated domain.\", \" You can also add a custom domain, which allows you to build custom REST APIs using nothing but Appwrite Functions. To do this, you need to first buy and register a domain. After obtaining a domain, follow these steps to add the domain to Appwrite.\", \" Navigate to the Appwrite Console's Functions page. Navigate to the Domains tab. Click on Create domain. Input your domain in the Domain input field and click Next. Copy the CNAME record provided to you, and add it to your domain registrar. Click Go to console and wait for the domain name to be verified and certificate to generate.\", \" DNS records can take up to 48 hours to propagate after they're added. Please retry verification over the next 48 hours. If the domain verification still fails and you have confirmed DNS records are added correctly, please contact support.\"]}, {\"level\": 2, \"title\": \"Debugging Build\", \"body\": [\"After deploying a function, you can find the status of the deployment and build logs in the Appwrite Console.\", \" In Appwrite Console, navigate to Functions. Click to open a function you wish to inspect. Under the Deployments tab, you'll find the status of the current active deployment and previous inactive deployments. You can access build logs for the active deployment by clicking the Build logs button. You can click on an inactive function's three dots button to find their build logs.\"]}]", "metadata": {"source": "http://167.172.175.165:2080/docs/functions-deploy"}}