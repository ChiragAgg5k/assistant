{"page_content": "[{\"level\": 1, \"title\": \" User Management \", \"body\": [\" Appwrite has built-in features to help manage user accounts. Users can be organized into teams and be given labels, so they can be given different permissions and access different resources. Each user can also have their own preference object, which you can use to save preferences such as theme, language, and notification settings.\"]}, {\"level\": 2, \"title\": \"User Preferences\", \"body\": [\" You can store user preferences on a user's account using Appwrite's Update Preferences endpoint. You can store user preferences such as theme, notification settings, or preferred language so they can be synced across multiple devices.\", \" Preferences are stored as a key-value JSON object. The maximum allowed size for preferences is 64kB, and an error will be thrown if this limit is exceeded.\", \" Web  import { Client, Account } from \\\"appwrite\\\";\\n\\nconst client = new Client()\\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\\n    .setProject('[PROJECT_ID]');               // Your project ID\\n\\nconst account = new Account(client);\\n\\nconst promise = account.updatePrefs({darkTheme: true, language: 'en'});\\n\\npromise.then(function (response) {\\n    console.log(response); // Success\\n}, function (error) {\\n    console.log(error); // Failure\\n});    Flutter  import 'package:appwrite/appwrite.dart';\\n\\nfinal client = Client()\\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\\n    .setProject('[PROJECT_ID]');               // Your project ID\\n\\nfinal account = Account(client);\\n\\nfinal user = await account.updatePrefs(\\n    prefs: {\\n        \\\"darkTheme\\\": true,\\n        \\\"language\\\": \\\"en\\\",\\n    }\\n);   Android  import io.appwrite.Client\\nimport io.appwrite.services.Account\\n\\nval client = Client()\\n    .setEndpoint(\\\"https://cloud.appwrite.io/v1\\\") // Your API Endpoint\\n    .setProject(\\\"[PROJECT_ID]\\\")                // Your project ID\\n\\nval account = Account(client)\\n\\nval user = account.updatePrefs(\\n    prefs = mapOf(\\\"darkTheme\\\" to true, \\\"language\\\" to \\\"en\\\")\\n)   Apple  import Appwrite\\n\\nlet client = Client()\\n    .setEndpoint(\\\"https://cloud.appwrite.io/v1\\\") // Your API Endpoint\\n    .setProject(\\\"[PROJECT_ID]\\\")                // Your project ID\\n\\nlet account = Account(client)\\n\\nlet user = try await account.updatePrefs(\\n    prefs: [\\\"darkTheme\\\": true, \\\"language\\\": \\\"en\\\"]\\n)   GraphQL  mutation {\\n    accountUpdatePrefs(\\n        prefs: \\\"{\\\\\\\"darkTheme\\\\\\\": true, \\\\\\\"language\\\\\\\": \\\\\\\"en\\\\\\\"}\\\"\\n    ) {\\n        _id\\n        name\\n        prefs {\\n            data\\n        }\\n    }\\n}  \", \"After a user's preferences are updated, they can be retrieved using the Get Preferences endpoint.\", \" Web  import { Client, Account } from \\\"appwrite\\\";\\n\\nconst client = new Client()\\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\\n    .setProject('[PROJECT_ID]');               // Your project ID\\n\\nconst account = new Account(client);\\n\\nconst promise = account.getPrefs();\\n\\npromise.then(function (response) {\\n    console.log(response); // Success\\n}, function (error) {\\n    console.log(error); // Failure\\n});    Flutter  import 'package:appwrite/appwrite.dart';\\n\\nfinal client = Client()\\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\\n    .setProject('[PROJECT_ID]');               // Your project ID\\n\\nfinal account = Account(client);\\n\\nfinal prefs = await account.getPrefs();   Android  import io.appwrite.Client\\nimport io.appwrite.services.Account\\n\\nval client = Client(context)\\n    .setEndpoint(\\\"https://cloud.appwrite.io/v1\\\") // Your API Endpoint\\n    .setProject(\\\"[PROJECT_ID]\\\")                // Your project ID\\n\\nval account = Account(client)\\n\\nval prefs = account.getPrefs()   Apple  import Appwrite\\n\\nlet client = Client()\\n    .setEndpoint(\\\"https://cloud.appwrite.io/v1\\\") // Your API Endpoint\\n    .setProject(\\\"[PROJECT_ID]\\\")                // Your project ID\\n\\nlet account = Account(client)\\n\\nlet prefs = try await account.getPrefs()   GraphQL  query {\\n    accountGetPrefs {\\n        data\\n    }\\n}  \"]}, {\"level\": 2, \"title\": \"Users API\", \"body\": [\" The Users API is a dedicated API for managing users from an admin's perspective. You'll notice that the Account API doesn't allow you to view or make changes to other users. This is by design and for security reasons.\", \" You can use the Users API with an API key authenticated Server SDK to manage users. If you must expose parts of the Users API to normal users, we suggest doing so through an Appwrite Function. Exposing API keys to users is dangerous and a security risk, by using an Appwrite Function, you can add your own validation to prevent malicious behavior.\", \" Learn more about the Users API\"]}, {\"level\": 2, \"title\": \"Labels\", \"body\": [\" Labels are a good way to flag a user to grant them access to resources. For example, a subscriber label can be added to a user once they've purchased a subscription.\", \"  Node.js  const sdk = require('node-appwrite');\\n\\n// Init SDK\\nconst client = new sdk.Client();\\n\\nconst users = new sdk.Users(client);\\n\\nclient\\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\\n    .setProject('5df5acd0d48c2') // Your project ID\\n    .setKey('919c2d18fb5d4...a2ae413da83346ad2') // Your secret API key\\n;\\n\\nconst promise = users.updateLabels('[USER_ID]', [ Role.label('subscriber') ]);\\n\\npromise.then(function (response) {\\n    console.log(response); // Success\\n}, function (error) {\\n    console.log(error); // Failure\\n});    PHP  use Appwrite\\\\Client;\\nuse Appwrite\\\\Services\\\\Users;\\nuse Appwrite\\\\Role;\\n\\n$client = new Client();\\n\\n$client\\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\\n    .setProject('5df5acd0d48c2') // Your project ID\\n    .setKey('919c2d18fb5d4...a2ae413da83346ad2') // Your secret API key\\n;\\n\\n$users = new Users($client);\\n\\n$result = $users->updateLabels(\\n    '[USER_ID]', \\n    [\\n        Role.label('subscriber'),\\n    ]\\n);    Python  from appwrite.client import Client\\nfrom appwrite.services.users import Users\\nfrom appwrite.role import Role\\n\\nclient = Client()\\n\\n(client\\n  .set_endpoint('https://cloud.appwrite.io/v1') # Your API Endpoint\\n  .set_project('5df5acd0d48c2') # Your project ID\\n  .set_key('919c2d18fb5d4...a2ae413da83346ad2') # Your secret API key\\n)\\n \\nusers = Users(client)\\n\\nresult = users.update_labels('[USER_ID]', [ Role.label('subscriber') ])    Ruby  require 'Appwrite'\\n\\ninclude Appwrite\\n\\nclient = Client.new\\n    .set_endpoint('https://cloud.appwrite.io/v1') # Your API Endpoint\\n    .set_project('5df5acd0d48c2') # Your project ID\\n    .set_key('919c2d18fb5d4...a2ae413da83346ad2') # Your secret API key\\n\\nusers = Users.new(client)\\n\\nresponse = users.update_labels(user_id: '[USER_ID]', labels: [ Role.label('subscriber') ])\\n\\nputs response.inspect    Deno  import * as sdk from \\\"https://deno.land/x/appwrite/mod.ts\\\";\\n\\n// Init SDK\\nlet client = new sdk.Client();\\n\\nlet users = new sdk.Users(client);\\n\\nclient\\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\\n    .setProject('5df5acd0d48c2') // Your project ID\\n    .setKey('919c2d18fb5d4...a2ae413da83346ad2') // Your secret API key\\n;\\n\\n\\nconst promise = users.updateLabels('[USER_ID]', [ Role.label('subscriber') ]);\\n\\npromise.then(function (response) {\\n    console.log(response); // Success\\n}, function (error) {\\n    console.log(error); // Failure\\n});    Dart  import 'package:dart_appwrite/dart_appwrite.dart';\\n\\nvoid main() { // Init SDK\\n  Client client = Client();\\n  Users users = Users(client);\\n\\n  client\\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\\n    .setProject('5df5acd0d48c2') // Your project ID\\n    .setKey('919c2d18fb5d4...a2ae413da83346ad2') // Your secret API key\\n  ;\\n\\n  Future result = users.updateLabels(\\n    userId: '[USER_ID]',\\n    labels: [ Role.label('subscriber') ],\\n  );\\n\\n  result\\n    .then((response) {\\n      print(response);\\n    }).catchError((error) {\\n      print(error.response);\\n  });\\n}    Kotlin  import io.appwrite.Client\\nimport io.appwrite.services.Users\\nimport io.appwrite.Role\\n\\nsuspend fun main() {\\n    val client = Client(context)\\n      .setEndpoint(\\\"https://cloud.appwrite.io/v1\\\") // Your API Endpoint\\n      .setProject(\\\"5df5acd0d48c2\\\") // Your project ID\\n      .setKey(\\\"919c2d18fb5d4...a2ae413da83346ad2\\\") // Your secret API key\\n\\n    val users = Users(client)\\n    val response = users.updateLabels(\\n        userId = \\\"[USER_ID]\\\",\\n        labels = [ Role.label('subscriber') ]\\n    )\\n    val json = response.body?.string()\\n}    Swift  import Appwrite\\n\\nfunc main() async throws {\\n    let client = Client()\\n      .setEndpoint(\\\"https://cloud.appwrite.io/v1\\\") // Your API Endpoint\\n      .setProject(\\\"5df5acd0d48c2\\\") // Your project ID\\n      .setKey(\\\"919c2d18fb5d4...a2ae413da83346ad2\\\") // Your secret API key\\n    let users = Users(client)\\n    let response = try await users.updateLabels(\\n        userId: \\\"[USER_ID]\\\",\\n        labels: [ Role.label('subscriber') ]\\n    )\\n\\n    print(String(describing: response)\\n}    .NET    \", \" This would correspond with the permissions Permissions.read(Role.label('subscriber')), Permissions.update(Role.label('subscriber')), Permissions.delete(Role.label('subscriber')), and Permissions.create(Role.label('subscriber')).\", \"  Learn more about permissions\"]}]", "metadata": {"source": "http://167.172.175.165:2080/docs/authentication-management"}}