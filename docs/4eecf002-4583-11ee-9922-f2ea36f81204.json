{"page_content": "[{\"level\": 1, \"title\": \" Development \", \"body\": [\" Appwrite Functions offer a familiar interface if you've developed REST endpoints. Each function is handled following a request and response pattern.\"]}, {\"level\": 2, \"title\": \"Lifecycle\", \"body\": [\" There is a clear lifecycle for all Appwrite Functions, from beginning to end. Here's everything that happens during a function execution.\", \" The function is invoked. Appwrite passes in request information like headers, body or path through the context.req object. The runtime executes the code you defined, you can log through the context.log() or context.error() methods. Function terminates when you return results using return context.res.send(), return context.res.json() or similar.\", \"You'll find all of these steps in a simple function like this.\", \"  Node.js  import { Client } from 'node-appwrite';\\n\\n// This is your Appwrite function\\n// It's executed each time we get a request\\nexport default async ({ req, res, log, error }) => {\\n  // Why not try the Appwrite SDK?\\n  //\\n  // const client = new Client()\\n  //    .setEndpoint('https://cloud.appwrite.io/v1')\\n  //    .setProject(process.env.APPWRITE_FUNCTION_PROJECT_ID)\\n  //    .setKey(process.env.APPWRITE_API_KEY);\\n\\n  // You can log messages to the console\\n  log('Hello, Logs!');\\n\\n  // If something goes wrong, log an error\\n  error('Hello, Errors!');\\n\\n  // The `req` object contains the request data\\n  if (req.method === 'GET') {\\n    // Send a response with the res object helpers\\n    // `res.send()` dispatches a string back to the client\\n    return res.send('Hello, World!');\\n  }\\n\\n  // `res.json()` is a handy helper for sending JSON\\n  return res.json({\\n    motto: 'Build Fast. Scale Big. All in One Place.',\\n    learn: 'https://appwrite.io/docs',\\n    connect: 'https://appwrite.io/discord',\\n    getInspired: 'https://builtwith.appwrite.io',\\n  });\\n};    PHP  require(__DIR__ . '/../vendor/autoload.php');\\n\\nuse Appwrite\\\\Client;\\nuse Appwrite\\\\Exception;\\n\\n// This is your Appwrite function\\n// It's executed each time we get a request\\nreturn function ($context) {\\n    // Why not try the Appwrite SDK?\\n    //\\n    // $client = new Client();\\n    // $client\\n    //     ->setEndpoint('https://cloud.appwrite.io/v1')\\n    //     ->setProject(getenv('APPWRITE_FUNCTION_PROJECT_ID'))\\n    //      ->setKey(getenv('APPWRITE_API_KEY'));\\n\\n    // You can log messages to the console\\n    $context->log('Hello, Logs!');\\n\\n    // If something goes wrong, log an error\\n    $context->error('Hello, Errors!');\\n\\n    // The `req` object contains the request data\\n    if ($context->req->method === 'GET') {\\n        // Send a response with the res object helpers\\n        // `res.send()` dispatches a string back to the client\\n        return $context->res->send('Hello, World!');\\n    }\\n\\n    // `res.json()` is a handy helper for sending JSON\\n    return $context->res->json([\\n        'motto' => 'Build Fast. Scale Big. All in One Place.',\\n        'learn' => 'https://appwrite.io/docs',\\n        'connect' => 'https://appwrite.io/discord',\\n        'getInspired' => 'https://builtwith.appwrite.io',\\n    ]);\\n};    Python  from appwrite.client import Client\\nimport os\\n\\n\\n# This is your Appwrite function\\n# It's executed each time we get a request\\ndef main(context):\\n    # Why not try the Appwrite SDK?\\n    #\\n    # client = (\\n    #     Client()\\n    #     .set_endpoint(\\\"https://cloud.appwrite.io/v1\\\")\\n    #     .set_project(os.environ[\\\"APPWRITE_FUNCTION_PROJECT_ID\\\"])\\n    #     .set_key(os.environ[\\\"APPWRITE_API_KEY\\\"])\\n    # )\\n\\n    # You can log messages to the console\\n    context.log(\\\"Hello, Logs!\\\")\\n\\n    # If something goes wrong, log an error\\n    context.error(\\\"Hello, Errors!\\\")\\n\\n    # The `ctx.req` object contains the request data\\n    if context.req.method == \\\"GET\\\":\\n        # Send a response with the res object helpers\\n        # `ctx.res.send()` dispatches a string back to the client\\n        return context.res.send(\\\"Hello, World!\\\")\\n\\n    # `ctx.res.json()` is a handy helper for sending JSON\\n    return context.res.json(\\n        {\\n            \\\"motto\\\": \\\"Build Fast. Scale Big. All in One Place.\\\",\\n            \\\"learn\\\": \\\"https://appwrite.io/docs\\\",\\n            \\\"connect\\\": \\\"https://appwrite.io/discord\\\",\\n            \\\"getInspired\\\": \\\"https://builtwith.appwrite.io\\\",\\n        }\\n    )    Ruby  require \\\"appwrite\\\"\\n\\n# This is your Appwrite function\\n# It's executed each time we get a request\\ndef main(context)\\n  # Why not try the Appwrite SDK?\\n  #\\n  # client = Appwrite::Client.new\\n  # client\\n  #   .set_endpoint('https://cloud.appwrite.io/v1')\\n  #   .set_project(ENV['APPWRITE_FUNCTION_PROJECT_ID'])\\n  #   .set_key(ENV['APPWRITE_API_KEY'])\\n\\n  # You can log messages to the console\\n  context.log(\\\"Hello, Logs!\\\")\\n\\n  # If something goes wrong, log an error\\n  context.error(\\\"Hello, Errors!\\\")\\n\\n  # The `ctx.req` object contains the request data\\n  if (context.req.method == \\\"GET\\\")\\n    # Send a response with the res object helpers\\n    # `ctx.res.send()` dispatches a string back to the client\\n    return context.res.send(\\\"Hello, World!\\\")\\n  end\\n\\n  # `ctx.res.json()` is a handy helper for sending JSON\\n  return context.res.json(\\n           {\\n             \\\"motto\\\": \\\"Build Fast. Scale Big. All in One Place.\\\",\\n             \\\"learn\\\": \\\"https://appwrite.io/docs\\\",\\n             \\\"connect\\\": \\\"https://appwrite.io/discord\\\",\\n             \\\"getInspired\\\": \\\"https://builtwith.appwrite.io\\\",\\n           }\\n         )\\nend    Deno  import { Client } from \\\"https://deno.land/x/appwrite@7.0.0/mod.ts\\\";\\n\\n// This is your Appwrite function\\n// It's executed each time we get a request\\nexport default ({ req, res, log, error }: any) => {\\n  // Why not try the Appwrite SDK?\\n  //\\n  // const client = new Client()\\n  //    .setEndpoint('https://cloud.appwrite.io/v1')\\n  //    .setProject(Deno.env.get(\\\"APPWRITE_FUNCTION_PROJECT_ID\\\"))\\n  //    .setKey(Deno.env.get(\\\"APPWRITE_API_KEY\\\"));\\n\\n  // You can log messages to the console\\n  log(\\\"Hello, Logs!\\\");\\n\\n  // If something goes wrong, log an error\\n  error(\\\"Hello, Errors!\\\");\\n\\n  // The `req` object contains the request data\\n  if (req.method === \\\"GET\\\") {\\n    // Send a response with the res object helpers\\n    // `res.send()` dispatches a string back to the client\\n    return res.send(\\\"Hello, World!\\\");\\n  }\\n\\n  // `res.json()` is a handy helper for sending JSON\\n  return res.json({\\n    motto: \\\"Build Fast. Scale Big. All in One Place.\\\",\\n    learn: \\\"https://appwrite.io/docs\\\",\\n    connect: \\\"https://appwrite.io/discord\\\",\\n    getInspired: \\\"https://builtwith.appwrite.io\\\",\\n  });\\n};    Dart  import 'dart:async';\\nimport 'package:dart_appwrite/dart_appwrite.dart';\\n\\n// This is your Appwrite function\\n// It's executed each time we get a request\\nFuture main(final context) async {\\n// Why not try the Appwrite SDK?\\n  //\\n  // final client = Client()\\n  //    .setEndpoint('https://cloud.appwrite.io/v1')\\n  //    .setProject(process.env.APPWRITE_FUNCTION_PROJECT_ID)\\n  //    .setKey(process.env.APPWRITE_API_KEY);\\n\\n  // You can log messages to the console\\n  context.log('Hello, Logs!');\\n\\n  // If something goes wrong, log an error\\n  context.error('Hello, Errors!');\\n\\n  // The `req` object contains the request data\\n  if (context.req.method == 'GET') {\\n    // Send a response with the res object helpers\\n    // `res.send()` dispatches a string back to the client\\n    return context.res.send('Hello, World!');\\n  }\\n\\n  // `res.json()` is a handy helper for sending JSON\\n  return context.res.json({\\n    'motto': 'Build Fast. Scale Big. All in One Place.',\\n    'learn': 'https://appwrite.io/docs',\\n    'connect': 'https://appwrite.io/discord',\\n    'getInspired': 'https://builtwith.appwrite.io',\\n  });\\n}    Swift  import Appwrite\\nimport AppwriteModels\\nimport Foundation\\n\\n// This is your Appwrite function\\n// It's executed each time we get a request\\nfunc main(context: RuntimeContext) async throws -> RuntimeOutput {\\n    // Why not try the Appwrite SDK?\\n    //\\n    // let client = Client()\\n    //    .setEndpoint(\\\"https://cloud.appwrite.io/v1\\\")\\n    //    .setProject(ProcessInfo.processInfo.environment[\\\"APPWRITE_FUNCTION_PROJECT_ID\\\"])\\n    //    .setKey(ProcessInfo.processInfo.environment[\\\"APPWRITE_API_KEY\\\"]);\\n\\n    // You can log messages to the console\\n    context.log(\\\"Hello, Logs!\\\")\\n\\n    // If something goes wrong, log an error\\n    context.error(\\\"Hello, Errors!\\\")\\n\\n    // The `context.req` object contains the request data\\n    if context.req.method == \\\"GET\\\" {\\n        // Send a response with the res object helpers\\n        // `res.send()` dispatches a string back to the client\\n        return try context.res.send(\\\"Hello, World!\\\")\\n    }\\n\\n    // `context.res.json()` is a handy helper for sending JSON\\n    return try context.res.json([\\n        \\\"motto\\\": \\\"Build Fast. Scale Big. All in One Place.\\\",\\n        \\\"learn\\\": \\\"https://appwrite.io/docs\\\",\\n        \\\"connect\\\": \\\"https://appwrite.io/discord\\\",\\n        \\\"getInspired\\\": \\\"https://builtwith.appwrite.io\\\",\\n    ])\\n}    .NET  namespace DotNetRuntime;\\n\\nusing Appwrite;\\nusing Appwrite.Services;\\nusing Appwrite.Models;\\n\\npublic class Handler {\\n\\n    // This is your Appwrite function\\n    // It\\\"s executed each time we get a request\\n    public async Task Main(RuntimeContext Context) \\n    {\\n        // Why not try the Appwrite SDK?\\n        //\\n        // var client = new Client()\\n        //     .SetEndpoint(\\\"http://cloud.appwrite.io/v1\\\")  \\n        //     .SetProject(Environment.GetEnvironmentVariable(\\\"APPWRITE_FUNCTION_PROJECT_ID\\\"))        \\n        //     .SetKey(Environment.GetEnvironmentVariable(\\\"APPWRITE_API_KEY\\\"))\\n\\n        // You can log messages to the console\\n        Context.Log(\\\"Hello, Logs!\\\");\\n\\n        // If something goes wrong, log an error\\n        Context.Error(\\\"Hello, Errors!\\\");\\n\\n        // The `Context.Req` object contains the request data\\n        if (Context.Req.Method == \\\"GET\\\") {\\n            // Send a response with the res object helpers\\n            // `Context.Res.Send()` dispatches a string back to the client\\n            return Context.Res.Send(\\\"Hello, World!\\\");\\n        }\\n\\n        // `Context.Res.Json()` is a handy helper for sending JSON\\n        return Context.Res.Json(new Dictionary()\\n        {\\n            { \\\"motto\\\", \\\"Build Fast. Scale Big. All in One Place.\\\" },\\n            { \\\"learn\\\", \\\"https://appwrite.io/docs\\\" },\\n            { \\\"connect\\\", \\\"https://appwrite.io/discord\\\" },\\n            { \\\"getInspired\\\", \\\"https://builtwith.appwrite.io\\\" },\\n        });\\n    }\\n}    Kotlin  package io.openruntimes.kotlin.src\\n\\nimport io.openruntimes.kotlin.RuntimeContext\\nimport io.openruntimes.kotlin.RuntimeOutput\\nimport io.appwrite.Client\\nimport java.util.HashMap\\n\\nclass Main {\\n    // This is your Appwrite function\\n    // It's executed each time we get a request\\n    fun main(context: RuntimeContext): RuntimeOutput {\\n        // Why not try the Appwrite SDK?\\n        // val client = Client().apply {\\n        //    setEndpoint(\\\"https://cloud.appwrite.io/v1\\\")\\n        //    setProject(System.getenv(\\\"APPWRITE_FUNCTION_PROJECT_ID\\\"))\\n        //    setKey(System.getenv(\\\"APPWRITE_API_KEY\\\"))\\n        // }\\n\\n        // You can log messages to the console\\n        context.log(\\\"Hello, Logs!\\\")\\n\\n        // If something goes wrong, log an error\\n        context.error(\\\"Hello, Errors!\\\")\\n\\n        // The `context.req` object contains the request data\\n        if (context.req.method == \\\"GET\\\") {\\n            // Send a response with the res object helpers\\n            // `context.res.send()` dispatches a string back to the client\\n            return context.res.send(\\\"Hello, World!\\\")\\n        }\\n\\n        // `context.res.json()` is a handy helper for sending JSON\\n        return context.res.json(mutableMapOf(\\n            \\\"motto\\\" to \\\"Build Fast. Scale Big. All in One Place.\\\",\\n            \\\"learn\\\" to \\\"https://appwrite.io/docs\\\",\\n            \\\"connect\\\" to \\\"https://appwrite.io/discord\\\",\\n            \\\"getInspired\\\" to \\\"https://builtwith.appwrite.io\\\"\\n        ))\\n    }\\n}    Java  package io.openruntimes.java.src;\\n\\nimport io.openruntimes.java.RuntimeContext;\\nimport io.openruntimes.java.RuntimeOutput;\\nimport java.util.HashMap;\\nimport io.appwrite.Client;\\n\\npublic class Main {\\n\\n    // This is your Appwrite function\\n    // It's executed each time we get a request\\n    public RuntimeOutput main(RuntimeContext context) throws Exception {\\n        // Why not try the Appwrite SDK?\\n        //\\n        // Client client = new Client();\\n        // client\\n        //         .setEndpoint(\\\"https://cloud.appwrite.io/v1\\\")\\n        //         .setProject(System.getenv(\\\"APPWRITE_FUNCTION_PROJECT_ID\\\"))\\n        //         .setKey(System.getenv(\\\"APPWRITE_API_KEY\\\"));\\n\\n        // You can log messages to the console\\n        context.log(\\\"Hello, Logs!\\\");\\n\\n        // If something goes wrong, log an error\\n        context.error(\\\"Hello, Errors!\\\");\\n\\n        // The `context.getReq()` object contains the request data\\n        if (context.getReq().getMethod().equals(\\\"GET\\\")) {\\n            // Send a response with the res object helpers\\n            // `context.getRes().send()` dispatches a string back to the client\\n            return context.getRes().send(\\\"Hello, World!\\\");\\n        }\\n\\n        Map json = new HashMap<>();\\n        json.put(\\\"motto\\\", \\\"Build Fast. Scale Big. All in One Place.\\\");\\n        json.put(\\\"learn\\\", \\\"https://appwrite.io/docs\\\");\\n        json.put(\\\"connect\\\", \\\"https://appwrite.io/discord\\\");\\n        json.put(\\\"getInspired\\\", \\\"https://builtwith.appwrite.io\\\");\\n        \\n        // `context.getRes().json()` is a handy helper for sending JSON\\n        return context.getRes().json(json);\\n    }\\n}  \", \"If you prefer to learn through more examples like this, explore the examples page.\"]}, {\"level\": 2, \"title\": \"The Context Object\", \"body\": [\" Context is an object passed into every function to handle communication to both the end users, and logging to the Appwrite Console. All input, output, and logging must be handled through the context object passed in.\", \"You'll find these properties in the context object.\", \"   Property Description     req Contains request information like method, body, and headers. See full examples here.   res Contains methods to build a response and return information. See full examples here.   log() Method to log information to the Appwrite Console, end users will not be able to see these logs. See full examples here.   error() Methoc to log errors to the Appwrite Console, end users will not be able to see these errors. See full examples here.   \"]}, {\"level\": 3, \"title\": \"Destructuring Assignment\", \"body\": [\" Some languages, namely JavaScript, support destructuring. You'll see us use destructing in examples, which has the following syntax. Learn more about destructuring assignment.\", \"  Node.js  // before destructuring\\nexport default async function (context) {\\n    context.log(\\\"This is a log!\\\");\\n    // ... more code\\n}\\n\\n// after destructuring\\nexport default async function ({ req, res, log, error }) {\\n    log(\\\"This is a log!\\\");\\n    // ... more code\\n}    Deno  // before destructuring\\nexport default async function (context: any) {\\n    context.log(\\\"This is a log!\\\");\\n    // ... more code\\n}\\n   \\n// after destructuring\\nexport default async function ({ req, res, log, error }: any) {\\n    context.log(\\\"This is a log!\\\");\\n    // ... more code\\n}  \"]}, {\"level\": 3, \"title\": \"Request\", \"body\": [\" If you pass data into an Appwrite Function, it'll be found in the request object. This includes all invocation inputs from Appwrite SDKs, HTTP calls, Appwrite events, or browsers visiting the configured domain. Explore the request object with the following function, which logs all request params to the Appwrite Console.\", \"  Node.js  export default async ({ req, res, log }) => {\\n    log(req.bodyRaw);                     // Raw request body, contains request data\\n    log(JSON.stringify(req.body));        // Object from parsed JSON request body, otherwise string\\n    log(JSON.stringify(req.headers));     // String key-value pairs of all request headers, keys are lowercase\\n    log(req.scheme);                      // Value of the x-forwarded-proto header, usually http or https\\n    log(req.method);                      // Request method, such as GET, POST, PUT, DELETE, PATCH, etc.\\n    log(req.url);                         // Full URL, for example: http://awesome.appwrite.io:8000/v1/hooks?limit=12&offset=50\\n    log(req.host);                        // Hostname from the host header, such as awesome.appwrite.io\\n    log(req.port);                        // Port from the host header, for example 8000\\n    log(req.path);                        // Path part of URL, for example /v1/hooks\\n    log(req.queryString);                 // Raw query params string. For example \\\"limit=12&offset=50\\\"\\n    log(JSON.stringify(req.query));       // Parsed query params. For example, req.query.limit\\n\\n    return res.send(\\\"All the request parameters are logged to the Appwrite Console.\\\");\\n};    PHP  <?php\\nreturn function ($context) {\\n    $context->log($context->req->bodyRaw);              // Raw request body, contains request data\\n    $context->log(json_encode($context->req->body));    // Object from parsed JSON request body, otherwise string\\n    $context->log(json_encode($context->req->headers)); // String key-value pairs of all request headers, keys are lowercase\\n    $context->log($context->req->scheme);               // Value of the x-forwarded-proto header, usually http or https\\n    $context->log($context->req->method);               // Request method, such as GET, POST, PUT, DELETE, PATCH, etc.\\n    $context->log($context->req->url);                  // Full URL, for example: http://awesome.appwrite.io:8000/v1/hooks?limit=12&offset=50\\n    $context->log($context->req->host);                 // Hostname from the host header, such as awesome.appwrite.io\\n    $context->log($context->req->port);                 // Port from the host header, for example 8000\\n    $context->log($context->req->path);                 // Path part of URL, for example /v1/hooks\\n    $context->log($context->req->queryString);          // Raw query params string. For example \\\"limit=12&offset=50\\\"\\n    $context->log(json_encode($context->req->query));   // Parsed query params. For example, req.query.limit\\n\\n    return $context->res->send(\\\"All the request parameters are logged to the Appwrite Console.\\\");\\n}    Python  import json\\n\\ndef main(context):\\n    context.log(context.req.bodyRaw)             # Raw request body, contains request data\\n    context.log(json.dumps(context.req.body))    # Object from parsed JSON request body, otherwise string\\n    context.log(json.dumps(context.req.headers)) # String key-value pairs of all request headers, keys are lowercase\\n    context.log(context.req.scheme)              # Value of the x-forwarded-proto header, usually http or https\\n    context.log(context.req.method)              # Request method, such as GET, POST, PUT, DELETE, PATCH, etc.\\n    context.log(context.req.url)                 # Full URL, for example: http://awesome.appwrite.io:8000/v1/hooks?limit=12&offset=50\\n    context.log(context.req.host)                # Hostname from the host header, such as awesome.appwrite.io\\n    context.log(context.req.port)                # Port from the host header, for example 8000\\n    context.log(context.req.path)                # Path part of URL, for example /v1/hooks\\n    context.log(context.req.queryString)         # Raw query params string. For example \\\"limit=12&offset=50\\\"\\n    context.log(json.dumps(context.req.query))   # Parsed query params. For example, req.query.limit\\n\\n    return context.res.send(\\\"All the request parameters are logged to the Appwrite Console.\\\")    Ruby  require 'json'\\n                \\ndef main(context)\\n    context.log(context.req.bodyRaw)                #  Raw request body, contains request data\\n    context.log(JSON.generate(context.req.body))    # Object from parsed JSON request body, otherwise string\\n    context.log(JSON.generate(context.req.headers)) # String key-value pairs of all request headers, keys are lowercase\\n    context.log(context.req.scheme)                 # Value of the x-forwarded-proto header, usually http or https\\n    context.log(context.req.method)                 # Request method, such as GET, POST, PUT, DELETE, PATCH, etc.\\n    context.log(context.req.url)                    # Full URL, for example: http://awesome.appwrite.io:8000/v1/hooks?limit=12&offset=50\\n    context.log(context.req.host)                   # Hostname from the host header, such as awesome.appwrite.io\\n    context.log(context.req.port)                   # Port from the host header, for example 8000\\n    context.log(context.req.path)                   # Path part of URL, for example /v1/hooks\\n    context.log(context.req.queryString)            # Raw query params string. For example \\\"limit=12&offset=50\\\"\\n    context.log(JSON.generate(context.req.query))   # Parsed query params. For example, req.query.limit\\n\\n    return context.res.send(\\\"All the request parameters are logged to the Appwrite Console.\\\")\\nend    Deno  export default async ({ req, res, log }: any) => {\\n    log(req.bodyRaw);                 // Raw request body, contains request data\\n    log(JSON.stringify(req.body));    // Object from parsed JSON request body, otherwise string\\n    log(JSON.stringify(req.headers)); // String key-value pairs of all request headers, keys are lowercase\\n    log(req.scheme);                  // Value of the x-forwarded-proto header, usually http or https\\n    log(req.method);                  // Request method, such as GET, POST, PUT, DELETE, PATCH, etc.\\n    log(req.url);                     // Full URL, for example: http://awesome.appwrite.io:8000/v1/hooks?limit=12&offset=50\\n    log(req.host);                    // Hostname from the host header, such as awesome.appwrite.io\\n    log(req.port);                    // Port from the host header, for example 8000\\n    log(req.path);                    // Path part of URL, for example /v1/hooks\\n    log(req.queryString);             // Raw query params string. For example \\\"limit=12&offset=50\\\"\\n    log(JSON.stringify(req.query));   // Parsed query params. For example, req.query.limit\\n\\n    return res.send(\\\"All the request parameters are logged to the Appwrite Console.\\\");    Dart  import 'dart:async';\\nimport 'dart:convert';\\n\\nFuture<dynamic> main(final context) async {\\n    context.log(context.req.bodyRaw);              // Raw request body, contains request data\\n    context.log(json.encode(context.req.body));    // Object from parsed JSON request body, otherwise string\\n    context.log(json.encode(context.req.headers)); // String key-value pairs of all request headers, keys are lowercase\\n    context.log(context.req.scheme);               // Value of the x-forwarded-proto header, usually http or https\\n    context.log(context.req.method);               // Request method, such as GET, POST, PUT, DELETE, PATCH, etc.\\n    context.log(context.req.url);                  // Full URL, for example: http://awesome.appwrite.io:8000/v1/hooks?limit=12&offset=50\\n    context.log(context.req.host);                 // Hostname from the host header, such as awesome.appwrite.io\\n    context.log(context.req.port);                 // Port from the host header, for example 8000\\n    context.log(context.req.path);                 // Path part of URL, for example /v1/hooks\\n    context.log(context.req.queryString);          // Raw query params string. For example \\\"limit=12&offset=50\\\"\\n    context.log(json.encode(context.req.query));   // Parsed query params. For example, req.query.limit\\n\\n    return context.res.send(\\\"All the request parameters are logged to the Appwrite Console.\\\");\\n}    Swift  import Foundation\\nimport Foundation\\n\\nfunc main(context: RuntimeContext) async throws -> RuntimeOutput {\\n    context.log(context.req.bodyRaw)                                                     // Raw request body, contains request data\\n    context.log(NSJSONSerialization.jsonObject(with: context.req.body, options: [])!)    // Object from parsed JSON request body, otherwise string\\n    context.log(NSJSONSerialization.jsonObject(with: context.req.headers, options: [])!) // String key-value pairs of all request headers, keys are lowercase\\n    context.log(context.req.scheme)                                                      // Value of the x-forwarded-proto header, usually http or https\\n    context.log(context.req.method)                                                      // Request method, such as GET, POST, PUT, DELETE, PATCH, etc.\\n    context.log(context.req.url)                                                         // Full URL, for example: http://awesome.appwrite.io:8000/v1/hooks?limit=12&offset=50 \\n    context.log(context.req.host)                                                        // Hostname from the host header, such as awesome.appwrite.io\\n    context.log(context.req.port)                                                        // Port from the host header, for example 8000\\n    context.log(context.req.path)                                                        // Path part of URL, for example /v1/hooks\\n    context.log(context.req.queryString)                                                 // Raw query params string. For example \\\"limit=12&offset=50\\\"\\n    context.log(NSJSONSerialization.jsonObject(with: context.req.query, options: [])!)   // Parsed query params. For example, req.query.limit\\n\\n    return try context.res.send(\\\"All the request parameters are logged to the Appwrite Console.\\\")\\n}    .NET  namespace DotNetRuntime;\\n\\nusing System.Text.Json;\\n\\npublic class Handler {\\n    public async Task<RuntimeOutput> Main(RuntimeContext Context) \\n    {\\n        Context.Log(Context.Req.BodyRaw);                                                     // Raw request body, contains request data\\n        Context.Log(JsonSerializer.Serialize<object>(Context.Req.Body));                 // Object from parsed JSON request body, otherwise string\\n        Context.Log(JsonSerializer.Serialize<object>(Context.Req.Headers));              // String key-value pairs of all request headers, keys are lowercase\\n        Context.Log(Context.Req.Scheme);                                                      // Value of the x-forwarded-proto header, usually http or https\\n        Context.Log(Context.Req.Method);                                                      // Request method, such as GET, POST, PUT, DELETE, PATCH, etc.\\n        Context.Log(Context.Req.Url);                                                         // Full URL, for example: http://awesome.appwrite.io:8000/v1/hooks?limit=12&offset=50\\n        Context.Log(Context.Req.Host);                                                        // Hostname from the host header, such as awesome.appwrite.io\\n        Context.Log(Context.Req.Port);                                                        // Port from the host header, for example 8000\\n        Context.Log(Context.Req.Path);                                                        // Path part of URL, for example /v1/hooks\\n        Context.Log(Context.Req.QueryString);                                                 // Raw query params string. For example \\\"limit=12&offset=50\\\"\\n        Context.Log(JsonSerializer.Serialize<object>(Context.Req.Query));                // Parsed query params. For example, req.query.limit\\n\\n        return Context.Res.Send(\\\"All the request parameters are logged to the Appwrite Console.\\\");\\n    }\\n}    Kotlin  package io.openruntimes.kotlin.src\\n\\nimport io.openruntimes.kotlin.RuntimeContext\\nimport io.openruntimes.kotlin.RuntimeOutput\\nimport com.google.gson.Gson\\n\\nclass Main {\\n    fun main(context: RuntimeContext): RuntimeOutput {\\n        val gson = Gson()\\n\\n        context.log(context.req.bodyRaw)                // Raw request body, contains request data\\n        context.log(gson.toString(context.req.body))    // Object from parsed JSON request body, otherwise string\\n        context.log(gson.toString(context.req.headers)) // String key-value pairs of all request headers, keys are lowercase\\n        context.log(context.req.scheme)                 // Value of the x-forwarded-proto header, usually http or https\\n        context.log(context.req.method)                 // Request method, such as GET, POST, PUT, DELETE, PATCH, etc.\\n        context.log(context.req.url)                    // Full URL, for example: http://awesome.appwrite.io:8000/v1/hooks?limit=12&offset=50\\n        context.log(context.req.host)                   // Hostname from the host header, such as awesome.appwrite.io\\n        context.log(context.req.port)                   // Port from the host header, for example 8000\\n        context.log(context.req.path)                   // Path part of URL, for example /v1/hooks\\n        context.log(context.req.queryString)            // Raw query params string. For example \\\"limit=12&offset=50\\\"\\n        context.log(gson.toString(context.req.query))   // Parsed query params. For example, req.query.limit\\n\\n        return context.res.send(\\\"All the request parameters are logged to the Appwrite Console.\\\")\\n    }\\n}    Java  package io.openruntimes.java;\\n\\nimport com.google.gson.Gson;\\nimport io.openruntimes.java.models.RuntimeContext;\\nimport io.openruntimes.java.models.RuntimeOutput;\\n\\npublic class Main {\\n    public RuntimeOutput main(RuntimeContext context) {\\n        Gson gson = new Gson();\\n\\n        context.log(context.getReq().getBodyRaw());                // Raw request body, contains request data\\n        context.log(gson.toString(context.getReq().getBody()));    // Object from parsed JSON request body, otherwise string\\n        context.log(gson.toString(context.getReq().getHeaders())); // String key-value pairs of all request headers, keys are lowercase\\n        context.log(context.getReq().getScheme());                 // Value of the x-forwarded-proto header, usually http or https\\n        context.log(context.getReq().getMethod());                 // Request method, such as GET, POST, PUT, DELETE, PATCH, etc.\\n        context.log(context.getReq().getUrl());                    // Full URL, for example: http://awesome.appwrite.io:8000/v1/hooks?limit=12&offset=50\\n        context.log(context.getReq().getHost());                   // Hostname from the host header, such as awesome.appwrite.io\\n        context.log(context.getReq().getPort());                   // Port from the host header, for example 8000\\n        context.log(context.getReq().getPath());                   // Path part of URL, for example /v1/hooks\\n        context.log(context.getReq().getQueryString());            // Raw query params string. For example \\\"limit=12&offset=50\\\"\\n        context.log(gson.toString(context.getReq().getQuery()));   // Parsed query params. For example, req.query.limit\\n\\n        return context.getRes().send(\\\"All the request parameters are logged to the Appwrite Console.\\\");\\n    }\\n}  \"]}]", "metadata": {"source": "http://167.172.175.165:2080/docs/functions-develop"}}