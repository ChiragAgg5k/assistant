{"page_content": "[{\"level\": 1, \"title\": \" Relationships (Beta) \", \"body\": [\"Relationships describe how documents in different collections are associated, so that related documents can be read, updated, or deleted together. Entities in real-life often associate with each other in an organic and logical way, like a person and their dog, an album and its songs, or friends in a social network. These types of association between entities can be modeled in Appwrite using relationships.\", \" Experimental Feature Appwrite Relationships is an experimental feature. The API and behavior are subject to change in future versions.\"]}, {\"level\": 2, \"title\": \"When to Use a Relationship\", \"body\": [\"Relationships help reduce redundant information. For example, a user can create many posts in your app. You can model this without relationships by keeping a copy of the user's information in all the documents representing posts, but this creates a lot of duplicate information in your database about the user.\"]}, {\"level\": 3, \"title\": \"Benefits of Relationships\", \"body\": [\"Duplicated records waste storage, but more importantly, makes the database much harder to maintain. If the user changes their user name, you will have to update dozens or hundreds of records, a problem commonly known as an update anomaly in databases. You can avoid duplicate information by storing users and posts in separate collections and relating a user and their posts through a relationship.\"]}, {\"level\": 3, \"title\": \"Tradeoff\", \"body\": [\"Consider using relationships when the same information is found in multiple places to avoid duplicates. However, relationships come with the tradeoff of slowing down queries. For applications where the best read and write performance is important, it may be acceptable to tolerate duplicate data.\"]}, {\"level\": 2, \"title\": \"Configurable Options\", \"body\": []}, {\"level\": 3, \"title\": \"Directionality\", \"body\": [\"Appwrite relationships can be one-way or two-way.\", \"   Type Description     One-way The relationship is only visible to one side of the relation. This is similar to a tree data structure, where a tree has a reference to all of its leaves, but each leaf does not have a reference to its tree root.   Two-way The relationship is visible to both sides of the relationship. This is similar to a graph data structure, where each node has references to all its edges, and all its edges can reference the nodes it connects.  \"]}, {\"level\": 3, \"title\": \"Types\", \"body\": [\"Appwrite provides four different relationship types to enforce different associative rules between documents.\", \"   Type Description     One-to-one A document can only be related to one and only one document. If you try to relate multiple documents in a one-to-one relationship, Appwrite throws an error. For example, one user has one profile.   One-to-many A document can be related to many other documents. For example, one user can create many posts.   Many-to-one Many documents can be related to a single document. For example, many posts can share one author.   Many-to-many A document can be related to many other documents. For example, a user can have many friends, and many users can share the same friend.  \"]}, {\"level\": 3, \"title\": \"On-Delete Behavior\", \"body\": [\" Appwrite also allows you to define the behavior of a relationship when a document is deleted.\", \"   Type Description     Restrict If a document has at least one related document, it cannot be deleted.   Cascade If a document has related documents, when it is deleted, the related documents are also deleted.   Set null If a document has related documents, when it is deleted, the related documents are kept with their relationship attribute set to null.  \"]}, {\"level\": 2, \"title\": \"Relationship Attributes\", \"body\": [\"Relationships are represented in a collection using relationship attributes. The relationship attribute contains the ID of related documents, which it references during read, update, and delete operations. This attribute is null if a document has no related documents.\"]}, {\"level\": 2, \"title\": \"Creating Relationships in the Appwrite Console\", \"body\": [\"You can create relationships in the Appwrite Console by adding a relationship attribute to a collection.\", \" In your project, navigate to Databases > Select your database > Select your collection > Attributes > Create attribute. Select Relationship as the attribute type. In the Relationship modal, select the relationship type and pick the related collection and attributes. Pick relationship attribute key(s) to represent the related collection. Relationship attribute keys are used to reference the related collection in queries, so pick something that's intuitive and easy to remember. Select desired on delete behavior. Click the Create button to create the relationship.\"]}, {\"level\": 2, \"title\": \"Creating Relationships Programmatically\", \"body\": [\"  Node.js  const { Client, Databases } = require('node-appwrite');\\n\\nconst client = new Client()\\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\\n    .setProject('[PROJECT_ID]');               // Your project ID\\n\\nconst databases = new Databases(client);\\n\\ndatabases.createRelationshipAttribute(\\n    'marvel',     // Database ID\\n    'movies',     // Collection ID\\n    'reviews',    // Related collection ID\\n    'oneToMany',  // Relationship type\\n    true,         // Is two-way\\n    'reviews',    // Attribute key \\n    'movie',      // Two-way attribute key\\n    'cascade'     // On delete action\\n);    PHP  use \\\\Appwrite\\\\Client;\\nuse \\\\Appwrite\\\\Services\\\\Databases;\\n\\n$client = (new Client())\\n    ->setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\\n    ->setProject('[PROJECT_ID]');               // Your project ID\\n\\n$databases = new Databases($client);\\n\\n$databases->createRelationshipAttribute(\\n    databaseId: 'marvel',           // Database ID\\n    collectionId: 'movies',         // Collection ID\\n    relatedCollectionId: 'reviews', // Related collection ID\\n    type: 'oneToMany',              // Relationship type\\n    twoWay: true,                   // Is two-way\\n    key: 'reviews',                 // Attribute key \\n    twoWayKey: 'movie',             // Two-way attribute key\\n    onDelete: 'cascade'             // On delete action\\n);    Python  from appwrite.client import Client\\nfrom appwrite.services.databases import Databases\\n\\nclient = (Client()\\n    .set_endpoint('https://cloud.appwrite.io/v1')     # Your API Endpoint\\n    .set_project('[PROJECT_ID]'))                   # Your project ID\\n\\ndatabases = Databases(client)\\n\\ndatabases.create_relationship_attribute(\\n    database_id='marvel',             # Database ID               \\n    collection_id='movies',           # Collection ID\\n    related_collection_id='reviews',  # Related collection ID            \\n    type='oneToMany',                 # Relationship type\\n    two_way=True,                     # Is two-way\\n    key='reviews',                    # Attribute key \\n    two_way_key='movie',              # Two-way attribute key\\n    on_delete='cascade'               # On delete action\\n)    Ruby  require 'appwrite'\\n\\ninclude Appwrite\\n\\nclient = Client.new\\n    .set_endpoint('https://cloud.appwrite.io/v1')# Your API Endpoint\\n    .set_project('[PROJECT_ID]')               # Your project ID\\n\\ndatabases = Databases.new(client)\\n\\ndatabases.create_relationship_attribute(\\n    database_id: 'marvel',             # Database ID               \\n    collection_id: 'movies',           # Collection ID    \\n    related_collection_id: 'reviews',  # Related collection ID \\n    type: 'oneToMany',                 # Relationship type\\n    two_way: true,                     # Is two-way\\n    key: 'reviews',                    # Attribute key \\n    two_way_key: 'movie',              # Two-way attribute key     \\n    on_delete: 'cascade'               # On delete action\\n)    Deno  import { Client, Databases } from \\\"https://deno.land/x/appwrite/mod.ts\\\";\\n\\nconst client = new Client()\\n    .setEndpoint(\\\"https://cloud.appwrite.io/v1\\\") // Your API Endpoint\\n    .setProject(\\\"[PROJECT_ID]\\\");               // Your project ID\\n\\nconst databases = new Databases(client);\\n\\ndatabases.createRelationshipAttribute(\\n    \\\"marvel\\\",    // Database ID         \\n    \\\"movies\\\",    // Collection ID           \\n    \\\"reviews\\\",   // Related collection ID       \\n    \\\"oneToMany\\\", // Relationship type           \\n    true,        // Is two-way          \\n    \\\"reviews\\\",   // Attribute key           \\n    \\\"movie\\\",     // Two-way attribute key           \\n    \\\"cascade\\\"    // On delete action            \\n);    Dart  import 'package:appwrite/appwrite.dart';\\n\\nfinal client = Client()\\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\\n    .setProject('[PROJECT_ID]');               // Your project ID\\n\\nfinal databases = Databases(client);\\n\\nawait databases.createRelationshipAttribute(\\n    databaseId: 'marvel',           // Database ID                     \\n    collectionId: 'movies',         // Collection ID                        \\n    relatedCollectionId: 'reviews', // Related collection ID                    \\n    type: 'oneToMany',              // Relationship type            \\n    twoWay: true,                   // Is two-way               \\n    key: 'reviews',                 // Attribute key                    \\n    twoWayKey: 'movie',             // Two-way attribute key            \\n    onDelete: 'cascade',            // On delete action                 \\n);    Kotlin  import io.appwrite.Client\\nimport io.appwrite.services.Databases\\n\\nval client = Client()\\n    .setEndpoint(\\\"https://cloud.appwrite.io/v1\\\") // Your API Endpoint\\n    .setProject(\\\"[PROJECT_ID]\\\")                // Your project ID\\n\\nval databases = Databases(client)\\n\\ndatabases.createRelationshipAttribute(\\n    databaseId = \\\"marvel\\\",           // Database ID                 \\n    collectionId = \\\"movies\\\",         // Collection ID                      \\n    relatedCollectionId = \\\"reviews\\\", // Related collection ID               \\n    type = \\\"oneToMany\\\",              // Relationship type           \\n    twoWay = true,                   // Is two-way              \\n    key = \\\"reviews\\\",                 // Attribute key           \\n    twoWayKey = \\\"movie\\\",             // Two-way attribute key       \\n    onDelete = \\\"cascade\\\"             // On delete action        \\n)    Swift  import Appwrite\\n\\nlet client = Client()\\n    .setEndpoint(\\\"https://cloud.appwrite.io/v1\\\") // Your API Endpoint\\n    .setProject(\\\"[PROJECT_ID]\\\")                // Your project ID\\n\\nlet databases = Databases(client)\\n\\ndatabases.createRelationshipAttribute(\\n    databaseId: \\\"marvel\\\",           // Database ID              \\n    collectionId: \\\"movies\\\",         // Collection ID            \\n    relatedCollectionId: \\\"reviews\\\", // Related collection ID    \\n    type: \\\"oneToMany\\\",              // Relationship type        \\n    twoWay: true,                   // Is two-way               \\n    key: \\\"reviews\\\",                 // Attribute key            \\n    twoWayKey: \\\"movie\\\",             // Two-way attribute key        \\n    onDelete: \\\"cascade\\\"             // On delete action         \\n)    .NET  using Appwrite;\\nusing Appwrite.Services;\\n\\nvar client = new Client()\\n    .SetEndpoint(\\\"https://cloud.appwrite.io/v1\\\")\\n    .SetProject(\\\"[PROJECT_ID]\\\");\\n\\nvar databases = new Databases(client);\\n\\nawait databases.CreateRelationshipAttribute(\\n    databaseId: \\\"marvel\\\",\\n    collectionId: \\\"movies\\\",\\n    relatedCollectionId: \\\"reviews\\\",\\n    type: \\\"oneToMany\\\",\\n    twoWay: true,\\n    key: \\\"reviews\\\",\\n    twoWayKey: \\\"movie\\\",\\n    onDelete: \\\"cascade\\\");  \", \"The above example adds a relationship between the collections movies and reviews. A relationship attribute with the key reviews is added to the movies collection and another relationship attribute with the key movie is added to the reviews collection.\"]}, {\"level\": 2, \"title\": \"Creating Documents\", \"body\": [\"If a collection has relationship attributes, you can create documents in two ways.\"]}, {\"level\": 3, \"title\": \"Creating Child Documents\", \"body\": [\"You can create both the parent and child at once in a relationship by nesting data.\", \"  Web  const { Client, Databases, ID } = require('node-appwrite');\\n\\nconst client = new Client()\\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\\n    .setProject('[PROJECT_ID]');               // Your project ID\\n\\nconst databases = new Databases(client);\\n\\nawait databases.createDocument(\\n    'marvel',\\n    'movies',\\n    ID.unique(),\\n    {\\n        title: 'Spiderman',\\n        year: 2002,\\n        reviews: [\\n            { author: 'Bob', text: 'Great movie!' },\\n            { author: 'Alice', text: 'Loved it!' }\\n        ]\\n    }\\n)    Flutter  import 'package:appwrite/appwrite.dart';\\n\\nfinal client = Client()\\n    .setEndpoint('https://cloud.appwrite.io/v1')  // Your API Endpoint\\n    .setProject('[PROJECT_ID]');                // Your project ID\\n\\nfinal databases = Databases(client);\\n\\nawait databases.createDocument(\\n  databaseId: 'marvel',\\n  collectionId: 'movies',\\n  documentId: ID.unique(),\\n  data: {\\n    'title': 'Spiderman',\\n    'year': 2002,\\n    'reviews': [\\n      { 'author': 'Bob', 'text': 'Great movie!' },\\n      { 'author': 'Alice', 'text': 'Loved it!' }\\n    ]\\n  },\\n);    Apple  import Appwrite\\n\\nlet client = Client()\\n    .setEndpoint(\\\"https://cloud.appwrite.io/v1\\\") // Your API Endpoint\\n    .setProject(\\\"[PROJECT_ID]\\\")                // Your project ID\\n\\nlet databases = Database(client: client)\\n\\ndatabases.createDocument(\\n    databaseId: \\\"marvel\\\",\\n    collectionId: \\\"movies\\\",\\n    documentId: ID.unique(),\\n    data: [\\n        \\\"title\\\": \\\"Spiderman\\\",\\n        \\\"year\\\": 2002,\\n        \\\"reviews\\\": [\\n            [ \\\"author\\\": \\\"Bob\\\", \\\"text\\\": \\\"Great movie!\\\" ],\\n            [ \\\"author\\\": \\\"Alice\\\", \\\"text\\\": \\\"Loved it!\\\" ]\\n        ]\\n    ]\\n)    Android  import io.appwrite.Client\\nimport io.appwrite.services.Database\\nimport io.appwrite.ID\\n\\nval client = Client()\\n    .setEndpoint(\\\"https://cloud.appwrite.io/v1\\\") // Your API Endpoint\\n    .setProject(\\\"[PROJECT_ID]\\\")                // Your project ID\\n\\nval databases = Database(client)\\n\\ndatabases.createDocument(\\n    databaseId = \\\"marvel\\\",\\n    collectionId = \\\"movies\\\",\\n    documentId = ID.unique(),\\n    data = mapOf(\\n        \\\"title\\\" to \\\"Spiderman\\\",\\n        \\\"year\\\" to 2002,\\n        \\\"reviews\\\" to listOf(\\n            mapOf(\\\"author\\\" to \\\"Bob\\\", \\\"text\\\" to \\\"Great movie!\\\"),\\n            mapOf(\\\"author\\\" to \\\"Alice\\\", \\\"text\\\" to \\\"Loved it!\\\")\\n        )\\n    )\\n)  \", \"If a nested child document is included and no child document ID is provided, the child document will be given a unique ID.\", \"If a nested child document is included and no conflicting child document ID exists, the child document will be created.\", \"If a nested child document is included and the child document ID already exists, the child document will be updated.\"]}, {\"level\": 3, \"title\": \"Reference Child Documents\", \"body\": [\"If the child documents are already present in the related collection, you can create the parent and reference the child documents using their IDs.\", \"  Web  const { Client, Databases, ID } = require('node-appwrite');\\n\\nconst client = new Client()\\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\\n    .setProject('[PROJECT_ID]');               // Your project ID\\n\\nconst databases = new Databases(client);\\n\\nawait databases.createDocument(\\n    'marvel',\\n    'movies',\\n    ID.unique(),\\n    {\\n        title: 'Spiderman',\\n        year: 2002,\\n        reviews: [\\n            'review1',\\n            'review2'\\n        ]\\n    }\\n)    Flutter  import 'package:appwrite/appwrite.dart';\\n\\nfinal client = Client()\\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint    \\n    .setProject('[PROJECT_ID]');               // Your project ID  \\n\\nfinal databases = Databases(client);\\n\\nawait databases.createDocument(\\n  databaseId: 'marvel',\\n  collectionId: 'movies',\\n  documentId: ID.unique(),\\n  data: {\\n    'title': 'Spiderman',\\n    'year': 2002,\\n    'reviews': [\\n        'review1',\\n        'review2'\\n    ]\\n  },\\n);    Apple  import Appwrite\\n\\nlet client = Client()\\n    .setEndpoint(\\\"https://cloud.appwrite.io/v1\\\") // Your API Endpoint        \\n    .setProject(\\\"[PROJECT_ID]\\\")                // Your project ID      \\n\\nlet databases = Database(client: client)\\n\\ndatabases.createDocument(\\n    databaseId: \\\"marvel\\\",\\n    collectionId: \\\"movies\\\",\\n    documentId: ID.unique(),\\n    data: [\\n        \\\"title\\\": \\\"Spiderman\\\",\\n        \\\"year\\\": 2002,\\n        \\\"reviews\\\": [\\n            \\\"review1\\\",\\n            \\\"review2\\\"\\n        ]\\n    ]\\n)    Android  import io.appwrite.Client\\nimport io.appwrite.services.Database\\nimport io.appwrite.ID\\n\\nval client = Client()\\n    .setEndpoint(\\\"https://cloud.appwrite.io/v1\\\") // Your API Endpoint    \\n    .setProject(\\\"[PROJECT_ID]\\\")                // Your project ID  \\n\\nval databases = Database(client)\\n\\ndatabases.createDocument(\\n    databaseId = \\\"marvel\\\",\\n    collectionId = \\\"movies\\\",\\n    documentId = ID.unique(),\\n    data = mapOf(\\n        \\\"title\\\" to \\\"Spiderman\\\",\\n        \\\"year\\\" to 2002,\\n        \\\"reviews\\\" to listOf(\\n            \\\"review1\\\",\\n            \\\"review2\\\"\\n        )\\n    )\\n)  \"]}, {\"level\": 2, \"title\": \"Querying\", \"body\": [\"Querying is currently not available in the experimental version of Appwrite Relationships but will be added in a later version.\"]}, {\"level\": 2, \"title\": \"Updating Relationships\", \"body\": [\"Relationships can be updated by updating the relationship attribute.\", \"  Web  const { Client, Databases } = require('node-appwrite');\\n\\nconst client = new Client()\\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\\n    .setProject('[PROJECT_ID]');               // Your project ID\\n\\nconst databases = new Databases(client);\\n\\nawait databases.updateDocument(\\n    'marvel',\\n    'movies',\\n    'spiderman',\\n    {\\n        title: 'Spiderman',\\n        year: 2002,\\n        reviews: [\\n            'review4',\\n            'review5'\\n        ]\\n    }\\n);    Flutter  import 'package:appwrite/appwrite.dart';\\n\\nfinal client = Client()\\n    .setEndpoint('https://cloud.appwrite.io/v1')\\n    .setProject('[PROJECT_ID]');\\n\\nfinal databases = Databases(client);\\n\\nawait databases.updateDocument(\\n  databaseId: 'marvel',\\n  collectionId: 'movies',\\n  documentId: 'spiderman',\\n  data: {\\n    'title': 'Spiderman',\\n    'year': 2002,\\n    'reviews': [\\n        'review4',\\n        'review5'\\n    ]\\n  },\\n);    Apple  import Appwrite\\n\\nlet client = Client()\\n    .setEndpoint(\\\"https://cloud.appwrite.io/v1\\\")\\n    .setProject(\\\"[PROJECT_ID]\\\")\\n\\nlet databases = Database(client: client)\\n\\ndatabases.updateDocument(\\n    databaseId: \\\"marvel\\\",\\n    collectionId: \\\"movies\\\",\\n    documentId: \\\"spiderman\\\",\\n    data: [\\n        \\\"title\\\": \\\"Spiderman\\\",\\n        \\\"year\\\": 2002,\\n        \\\"reviews\\\": [\\n            \\\"review4\\\",\\n            \\\"review5\\\"\\n        ]\\n    ]\\n)    Android  import io.appwrite.Client\\nimport io.appwrite.services.Database\\n\\nval client = Client()\\n    .setEndpoint(\\\"https://cloud.appwrite.io/v1\\\")\\n    .setProject(\\\"[PROJECT_ID]\\\")\\n\\nval databases = Database(client)\\n\\ndatabases.updateDocument(\\n    databaseId = \\\"marvel\\\",\\n    collectionId = \\\"movies\\\",\\n    documentId = \\\"spiderman\\\",\\n    data = mapOf(\\n        \\\"title\\\" to \\\"Spiderman\\\",\\n        \\\"year\\\" to 2002,\\n        \\\"reviews\\\" to listOf(\\n            \\\"review4\\\",\\n            \\\"review5\\\"\\n        )\\n    )\\n)  \"]}, {\"level\": 2, \"title\": \"Deleting Relationships\", \"body\": []}, {\"level\": 3, \"title\": \"Unlink Relationships, Retain Documents\", \"body\": [\"If you need to unlink documents in a relationship but retain the documents, you can do this by updating the relationship attribute and removing the ID of the related document.\", \"If a document can be related to only one document, you can delete the relationship by setting the relationship attribute to null.\", \"If a document can be related to more than one document, you can delete the relationship by setting the relationship attribute to an empty list.\"]}, {\"level\": 3, \"title\": \"Deleting Relationships and Documents\", \"body\": [\"If you need to delete the documents as well as unlink the relationship, the approach depends on the on-delete behavior of a relationship.\", \"If the on-delete behavior is restrict, the link between the documents needs to be deleted first before the documents can be deleted individually.\", \"If the on-delete behavior is set null, deleting a document will leave related documents in place with their relationship attribute  set to null. If you wish to also delete related documents, they must be deleted individually.\", \"If the on-delete behavior is cascade, deleting the parent documents also deletes related child documents, except for many-to-one relationships. In many-to-one relationships, there are multiple parent documents related to a single child document, and when the child document is deleted, the parents are deleted in cascade.\", \"  Web  const { Client, Databases } = require('node-appwrite');\\n\\nconst client = new Client()\\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\\n    .setProject('[PROJECT_ID]');               // Your project ID\\n\\nconst databases = new Databases(client);\\n\\nawait databases.deleteDocument(\\n    'marvel',\\n    'movies',\\n    'spiderman'\\n);    Flutter  import 'package:appwrite/appwrite.dart';\\n\\nfinal client = Client()\\n    .setEndpoint('https://cloud.appwrite.io/v1')\\n    .setProject('[PROJECT_ID]');\\n\\nfinal databases = Databases(client);\\n\\nawait databases.deleteDocument(\\n  databaseId: 'marvel',\\n  collectionId: 'movies',\\n  documentId: 'spiderman'\\n);    Apple  import Appwrite\\n\\nlet client = Client()\\n    .setEndpoint(\\\"https://cloud.appwrite.io/v1\\\")\\n    .setProject(\\\"[PROJECT_ID]\\\")\\n\\nlet databases = Database(client: client)\\n\\ndatabases.deleteDocument(\\n    databaseId: \\\"marvel\\\",\\n    collectionId: \\\"movies\\\",\\n    documentId: \\\"spiderman\\\"\\n)    Android  import io.appwrite.Client\\nimport io.appwrite.services.Database\\n\\nval client = Client()\\n    .setEndpoint(\\\"https://cloud.appwrite.io/v1\\\")\\n    .setProject(\\\"[PROJECT_ID]\\\")\\n\\nval databases = Database(client)\\n\\ndatabases.deleteDocument(\\n    databaseId = \\\"marvel\\\",\\n    collectionId = \\\"movies\\\",\\n    documentId = \\\"spiderman\\\"\\n)  \"]}, {\"level\": 2, \"title\": \"Permissions\", \"body\": [\"To access documents in a relationship, you must have permission to access both the parent and child documents.\", \"When creating both the parent and child documents, the child document will inherit permissions from its parent.\", \"You can also provide explicit permissions to the child document if they should be different from their parent.\", \"  Web  const { Client, Databases, ID } = require('node-appwrite');\\n\\nconst client = new Client()\\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\\n    .setProject('[PROJECT_ID]');               // Your project ID\\n\\nconst databases = new Databases(client);\\n\\nawait databases.createDocument(\\n    'marvel',\\n    'movies',\\n    ID.unique(),\\n    {\\n        title: 'Spiderman',\\n        year: 2002,\\n        reviews: [\\n            { \\n                author: 'Bob', \\n                text: 'Great movie!',\\n                $permissions: [\\n                    Permission.read(Role.any())\\n                ]\\n            },\\n        ]\\n    }\\n)    Flutter  import 'package:appwrite/appwrite.dart';\\n\\nfinal client = Client()\\n    .setEndpoint('https://cloud.appwrite.io/v1')\\n    .setProject('[PROJECT_ID]');\\n\\nfinal databases = Databases(client);\\n\\nawait databases.createDocument(\\n  databaseId: 'marvel',\\n  collectionId: 'movies',\\n  documentId: ID.unique(),\\n  data: {\\n    'title': 'Spiderman',\\n    'year': 2002,\\n    'reviews': [\\n      { \\n         'author': 'Bob', \\n         'text:' 'Great movie!',\\n         '\\\\$permissions': [\\n           Permission.read(Role.any())\\n         ]\\n       },\\n    ]\\n  },\\n);    Apple  import Appwrite\\n\\nlet client = Client()\\n    .setEndpoint(\\\"https://cloud.appwrite.io/v1\\\")\\n    .setProject(\\\"[PROJECT_ID]\\\")\\n\\nlet databases = Database(client: client)\\n\\ndatabases.createDocument(\\n    databaseId: \\\"marvel\\\",\\n    collectionId: \\\"movies\\\",\\n    documentId: ID.unique(),\\n    data: [\\n        \\\"title\\\": \\\"Spiderman\\\",\\n        \\\"year\\\": 2002,\\n        \\\"reviews\\\": [\\n            [ \\n                \\\"author\\\": \\\"Bob\\\",\\n                \\\"text\\\": \\\"Great movie!\\\",\\n                \\\"$permissions\\\": [\\n                    Permission.read(Role.any())\\n                ]\\n            ],\\n        ]\\n    ]\\n)    Android  import Appwrite\\n\\nlet client = Client()\\n    .setEndpoint(\\\"https://cloud.appwrite.io/v1\\\")\\n    .setProject(\\\"[PROJECT_ID]\\\")\\n\\nlet databases = Database(client: client)\\n\\ndatabases.createDocument(\\n    databaseId: \\\"marvel\\\",\\n    collectionId: \\\"movies\\\",\\n    documentId: ID.unique(),\\n    data: [\\n        \\\"title\\\": \\\"Spiderman\\\",\\n        \\\"year\\\": 2002,\\n        \\\"reviews\\\": [\\n            [ \\n                \\\"author\\\": \\\"Bob\\\",\\n                \\\"text\\\": \\\"Great movie!\\\",\\n                \\\"$permissions\\\": [\\n                    Permission.read(Role.any())\\n                ]\\n            ],\\n        ]\\n    ]\\n)  \", \"When creating, updating, or deleting in a relationship, you must have permission to access all documents referenced. If the user does not have read permission to any document, an exception will be thrown.\"]}]", "metadata": {"source": "http://167.172.175.165:2080/docs/databases-relationships"}}