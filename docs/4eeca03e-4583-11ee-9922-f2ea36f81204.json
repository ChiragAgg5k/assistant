{"page_content": "[{\"level\": 1, \"title\": \" Email and Password \", \"body\": [\" Email and password login is the most commonly used authentication method. Appwrite Authentication promotes a safer internet by providing secure APIs and promoting better password choices to end users. Appwrite supports added security features like blocking personal info in passwords, password dictionary, and password history to help users choose good passwords.\"]}, {\"level\": 2, \"title\": \"Sign Up\", \"body\": [\" You can use the Appwrite Client SDKs to create an account using email and password.\", \"  Web  import { Client, Account, ID } from \\\"appwrite\\\";\\n\\nconst client = new Client()\\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\\n    .setProject('[PROJECT_ID]');               // Your project ID\\n\\nconst account = new Account(client);\\n\\nconst promise = account.create('[USER_ID]', 'email@example.com', '');\\n\\npromise.then(function (response) {\\n    console.log(response); // Success\\n}, function (error) {\\n    console.log(error); // Failure\\n});    Flutter  import 'package:appwrite/appwrite.dart';\\n\\nfinal client = Client()\\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\\n    .setProject('[PROJECT_ID]');               // Your project ID\\n\\nfinal account = Account(client);\\n\\nfinal user = await account.create(\\n    userId: ID.unique(),\\n    email: 'email@example.com',\\n    password: 'password',\\n);   Android  import io.appwrite.Client\\nimport io.appwrite.services.Account\\nimport io.appwrite.ID\\n\\nval client = Client()\\n    .setEndpoint(\\\"https://cloud.appwrite.io/v1\\\") // Your API Endpoint\\n    .setProject(\\\"[PROJECT_ID]\\\")                // Your project ID\\n\\nval account = Account(client)\\n\\nval user = account.create(\\n    userId = ID.unique(),\\n    email = \\\"email@example.com\\\",\\n    password = \\\"password\\\"\\n)    Apple  import Appwrite\\n\\nlet client = Client()\\n    .setEndpoint(\\\"https://cloud.appwrite.io/v1\\\") // Your API Endpoint\\n    .setProject(\\\"[PROJECT_ID]\\\")                // Your project ID\\n\\nlet account = Account(client)\\n\\nlet user = try await account.create(\\n    userId: ID.unique(),\\n    email: \\\"email@example.com\\\",\\n    password: \\\"password\\\"\\n)    GraphQL  \\nmutation {\\n    accountCreate(userId: \\\"unique()\\\", email: \\\"email@example.com\\\", password: \\\"password\\\") {\\n        _id\\n        email\\n        name\\n    }\\n}  \", \" Passwords are hashed with Argon2, a resilient and secure password hashing algorithm.\"]}, {\"level\": 2, \"title\": \"Verification\", \"body\": [\" After an account is created, it can be verified through the account create verification route. The user doesn't need to be verified to log in, but you can restrict resource access to verified users only using permissions through the user([USER_ID], \\\"verified\\\") role.\", \" First, send a verification email. Specify a redirect URL which users will be redirected to. The verification secrets will be appended as query parameters to the redirect URL. In this example, the redirect URL is https://example.com/verify.\", \"  Web  import { Client, Account } from \\\"appwrite\\\";\\n\\nconst client = new Client();\\n\\nconst account = new Account(client);\\n\\nclient\\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\\n    .setProject('5df5acd0d48c2') // Your project ID\\n;\\n\\nconst promise = account.createVerification('https://example.com');\\n\\npromise.then(function (response) {\\n    console.log(response); // Success\\n}, function (error) {\\n    console.log(error); // Failure\\n});    Flutter  import 'package:appwrite/appwrite.dart';\\n\\nvoid main() { // Init SDK\\n  Client client = Client();\\n  Account account = Account(client);\\n\\n  client\\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\\n    .setProject('5df5acd0d48c2') // Your project ID\\n  ;\\n  Future result = account.createVerification(\\n    url: 'https://example.com',\\n  );\\n\\n  result\\n    .then((response) {\\n      print(response);\\n    }).catchError((error) {\\n      print(error.response);\\n  });\\n}   Android  import androidx.appcompat.app.AppCompatActivity\\nimport android.os.Bundle\\nimport kotlinx.coroutines.GlobalScope\\nimport kotlinx.coroutines.launch\\nimport io.appwrite.Client\\nimport io.appwrite.services.Account\\n\\nclass MainActivity : AppCompatActivity() {\\n    override fun onCreate(savedInstanceState: Bundle?) {\\n        super.onCreate(savedInstanceState)\\n        setContentView(R.layout.activity_main)\\n\\n        val client = Client(applicationContext)\\n            .setEndpoint(\\\"https://cloud.appwrite.io/v1\\\") // Your API Endpoint\\n            .setProject(\\\"5df5acd0d48c2\\\") // Your project ID\\n\\n        val account = Account(client)\\n\\n        GlobalScope.launch {\\n            val response = account.createVerification(\\n                url = \\\"https://example.com\\\"\\n            )\\n            val json = response.body?.string()        \\n        }\\n    }\\n}    Apple  import Appwrite\\n\\nfunc main() async throws {\\n    let client = Client()\\n      .setEndpoint(\\\"https://cloud.appwrite.io/v1\\\") // Your API Endpoint\\n      .setProject(\\\"5df5acd0d48c2\\\") // Your project ID\\n    let account = Account(client)\\n    let token = try await account.createVerification(\\n        url: \\\"https://example.com\\\"\\n    )\\n\\n    print(String(describing: token)\\n}    GraphQL  mutation {\\n    accountCreateVerification(\\n        url: \\\"https://example.com\\\"\\n    ) {\\n        _id\\n        _createdAt\\n        userId\\n        secret\\n        expire\\n    }\\n}  \", \" Next, implement the verification page in your app. This page will parse the secrets passed in through the userId and secret query parameters. In this example, the code below will be found in the page served at https://example.com/verify.\", \" Since the secrets are passed in through url params, it will be easiest to perform this step in the browser.\", \"  Web  import { Client, Account } from \\\"appwrite\\\";\\n\\nconst client = new Client()\\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\\n    .setProject('[PROJECT_ID]');               // Your project ID\\n\\nconst account = new Account(client);\\n\\nconst urlParams = new URLSearchParams(window.location.search);\\nconst secret = urlParams.get('secret');\\nconst userId = urlParams.get('userId');\\n\\nconst promise = account.updateVerification(userId, secret);\\n\\npromise.then(function (response) {\\n    console.log(response);\\n}, function (error) {\\n    console.log(error);\\n});    Flutter  import 'package:appwrite/appwrite.dart';\\n\\nvoid main() { // Init SDK\\n  Client client = Client();\\n  Account account = Account(client);\\n\\n  client\\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\\n    .setProject('5df5acd0d48c2') // Your project ID\\n  ;\\n  Future result = account.updateVerification(\\n    userId: '[USER_ID]',\\n    secret: '[SECRET]',\\n  );\\n\\n  result\\n    .then((response) {\\n      print(response);\\n    }).catchError((error) {\\n      print(error.response);\\n  });\\n}   Android  import io.appwrite.Client\\nimport io.appwrite.services.Account\\n\\nval client = Client(context)\\n    .setEndpoint(\\\"https://cloud.appwrite.io/v1\\\") // Your API Endpoint\\n    .setProject(\\\"5df5acd0d48c2\\\") // Your project ID\\n\\nval account = Account(client)\\n\\nval response = account.updateVerification(\\n    userId = \\\"[USER_ID]\\\",\\n    secret = \\\"[SECRET]\\\"\\n)    Apple  import Appwrite\\n\\nlet client = Client()\\n    .setEndpoint(\\\"https://cloud.appwrite.io/v1\\\") // Your API Endpoint\\n    .setProject(\\\"5df5acd0d48c2\\\") // Your project ID\\n\\nlet account = Account(client)\\n\\nlet token = try await account.updateVerification(\\n    userId: \\\"[USER_ID]\\\",\\n    secret: \\\"[SECRET]\\\"\\n)    GraphQL  mutation {\\n    accountUpdateVerification(\\n        userId: \\\"[USER_ID]\\\",\\n        secret: \\\"[SECRET]\\\"\\n    ) {\\n        _id\\n        _createdAt\\n        userId\\n        secret\\n        expire\\n    }\\n}  \"]}, {\"level\": 2, \"title\": \"Log In\", \"body\": [\" After you've created your account, users can be logged in using the Create Email Session route.\", \"  Web  import { Client, Account } from \\\"appwrite\\\";\\n\\nconst client = new Client()\\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\\n    .setProject('[PROJECT_ID]');               // Your project ID\\n\\nconst account = new Account(client);\\n\\nconst promise = account.createEmailSession('email@example.com', 'password');\\n\\npromise.then(function (response) {\\n    console.log(response); // Success\\n}, function (error) {\\n    console.log(error); // Failure\\n});    Flutter  import 'package:appwrite/appwrite.dart';\\n\\nfinal client = Client()\\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\\n    .setProject('[PROJECT_ID]');               // Your project ID\\n\\nfinal account = Account(client);\\n\\nfinal session = await account.createEmailSession(\\n    email: 'email@example.com',\\n    password: 'password'\\n);   Android  import io.appwrite.Client\\nimport io.appwrite.services.Account\\n\\nval client = Client()\\n    .setEndpoint(\\\"https://cloud.appwrite.io/v1\\\") // Your API Endpoint\\n    .setProject(\\\"[PROJECT_ID]\\\")                // Your project ID\\n\\nval account = Account(client)\\n\\nval session = account.createEmailSession(\\n    email = \\\"email@example.com\\\",\\n    password = \\\"password\\\"\\n)   Apple  import Appwrite\\n\\nlet client = Client()\\n    .setEndpoint(\\\"https://cloud.appwrite.io/v1\\\") // Your API Endpoint\\n    .setProject(\\\"[PROJECT_ID]\\\")                // Your project ID\\n\\nlet account = Account(client)\\n\\nlet session = try await account.createEmailSession(\\n    email: \\\"email@example.com\\\",\\n    password: \\\"password\\\"\\n)   GraphQL  mutation {\\n    accountCreateEmailSession(email: \\\"email@example.com\\\", password: \\\"password\\\") {\\n        _id\\n        userId\\n        provider\\n        expire\\n    }\\n}  \"]}, {\"level\": 2, \"title\": \"Password Recovery\", \"body\": [\" If a user forgets their password, they can initiate a password recovery flow to recover their password. The Create Password Recovery endpoint sends the user an email with a temporary secret key for password reset. When the user clicks the confirmation link, they are redirected back to the password reset URL with the secret key and email address values attached to the URL as query strings. \", \" Only redirect URLs to domains added as a platform on your Appwrite console will be accepted. URLs not added as a platform are rejected to protect against redirect attacks.\", \" Web  import { Client, Account } from \\\"appwrite\\\";\\n\\nconst client = new Client()\\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\\n    .setProject('[PROJECT_ID]');               // Your project ID\\n\\nconst promise = account.createRecovery('email@example.com', 'https://example.com');\\n\\npromise.then(function (response) {\\n    console.log(response); // Success\\n}, function (error) {\\n    console.log(error); // Failure\\n});    Flutter  import 'package:appwrite/appwrite.dart';\\n\\nfinal client = Client()\\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\\n    .setProject('[PROJECT_ID]');               // Your project ID\\n\\nfinal account = Account(client);\\n\\nfinal user = account.createRecovery(\\n    email: 'email@example.com',\\n    url: 'https://example.com',\\n);   Android  import io.appwrite.Client\\nimport io.appwrite.services.Account\\n\\nval client = Client(context)\\n    .setEndpoint(\\\"https://cloud.appwrite.io/v1\\\") // Your API Endpoint\\n    .setProject(\\\"[PROJECT_ID]\\\")                // Your project ID\\n\\nval account = Account(client)\\n\\nval response = account.createRecovery(\\n    email = \\\"email@example.com\\\",\\n    url = \\\"https://example.com\\\"\\n)   Apple  import Appwrite\\n\\nlet client = Client()\\n    .setEndpoint(\\\"https://cloud.appwrite.io/v1\\\") // Your API Endpoint\\n    .setProject(\\\"[PROJECT_ID]\\\")                // Your project ID\\n\\nlet account = Account(client)\\n\\nlet token = try await account.createRecovery(\\n    email: \\\"email@example.com\\\",\\n    url: \\\"https://example.com\\\"\\n)   GraphQL  mutation {\\n    accountCreateRecovery(\\n        email: \\\"email@example.com\\\",\\n        url: \\\"https://example.com\\\"\\n    ) {\\n        _id\\n        _createdAt\\n        userId\\n        secret\\n        expire\\n    }\\n}  \", \"After receiving an email with the secret attached to the redirect link, submit a request to the Create Password Recovery (confirmation) endpoint to complete the recovery flow. The verification link sent to the user's email address is valid for 1 hour.\", \" Web  import { Client, Account } from \\\"appwrite\\\";\\n\\nconst client = new Client()\\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\\n    .setProject('[PROJECT_ID]');               // Your project ID\\n\\nconst promise = account.updateRecovery('[USER_ID]', '[SECRET]', 'password', 'password');\\n\\npromise.then(function (response) {\\n    console.log(response); // Success\\n}, function (error) {\\n    console.log(error); // Failure\\n});    Flutter  import 'package:appwrite/appwrite.dart';\\n\\nfinal client = Client()\\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\\n    .setProject('[PROJECT_ID]');               // Your project ID\\n\\nfinal account = Account(client);\\n\\nfinal user = await account.updateRecovery(\\n    userId: '[USER_ID]',\\n    secret: '[SECRET]',\\n    password: 'password'\\n    passwordAgain: 'password'\\n);   Android  import io.appwrite.Client\\nimport io.appwrite.services.Account\\n\\nval client = Client(context)\\n    .setEndpoint(\\\"https://cloud.appwrite.io/v1\\\") // Your API Endpoint\\n    .setProject(\\\"[PROJECT_ID]\\\")                // Your project ID\\n\\nval account = Account(client)\\n\\nval token = account.updateRecovery(\\n    userId = \\\"[USER_ID]\\\",\\n    secret = \\\"[SECRET]\\\",\\n    password = \\\"password\\\",\\n    passwordAgain = \\\"password\\\"\\n)   Apple  import Appwrite\\n\\nlet client = Client()\\n    .setEndpoint(\\\"https://cloud.appwrite.io/v1\\\") // Your API Endpoint\\n    .setProject(\\\"[PROJECT_ID]\\\")                // Your project ID\\n\\nlet account = Account(client)\\n\\nlet token = try await account.updateRecovery(\\n    userId: \\\"[USER_ID]\\\",\\n    secret: \\\"[SECRET]\\\",\\n    password: \\\"password\\\",\\n    passwordAgain: \\\"password\\\"\\n)   GraphQL  mutation {\\n    accountUpdateRecovery(\\n        userId: \\\"[USER_ID]\\\",\\n        secret: \\\"[SECRET]\\\",\\n        password: \\\"password\\\",\\n        passwordAgain: \\\"password\\\"\\n    ) {\\n        _id\\n        _createdAt\\n        userId\\n        secret\\n        expire\\n    }\\n}  \"]}]", "metadata": {"source": "http://167.172.175.165:2080/docs/authentication-email-pass"}}