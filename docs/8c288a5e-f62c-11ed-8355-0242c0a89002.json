{"page_content": "[{\"level\": 1, \"title\": \" Databases \", \"body\": [\" The Databases Service allows you to store your application and users' data and fetch it using different supported queries. You can organize your data into a three-level hierarchy, which are databases, collections, and documents. Each database is a group of collections, each collection is a group of documents that share the same schema, and each document contains a set of data.\", \" In addition, the Databases Service provides built-in validation to check the integrity of your incoming data, custom indexing for query performance, relationships to link data, and a flexible permissions mechanism to easily segment data between different users, teams, and roles. You can also use the Appwrite Realtime API to subscribe to live changes in your database.\"]}, {\"level\": 2, \"title\": \"Create Your Databases\", \"body\": [\" Appwrite's Databases Service allows you to create multiple databases. Each database can contain many collections and can be backed by a different database adaptor in future versions.\", \" You can create your database by adding it to your Appwrite project's dashboard. Access the Databases Service settings from your project's left-hand navigation panel. To create a new database, click the Create Database button. Name your new database, and optionally provide a custom database ID.\", \" You can also create databases with the Appwrite CLI or the Appwrite Server SDKs.\"]}, {\"level\": 2, \"title\": \"Create Your Collections\", \"body\": [\" Appwrite uses collections as containers of documents. The terms collections and documents are used because the Appwrite JSON REST API resembles the API of a traditional NoSQL database. That said, internally, Appwrite will support both SQL and NoSQL database adapters like MariaDB, MySQL, or MongoDB. When working with an SQL adapter, Appwrite will treat your collections as tables and documents as rows on native SQL tables.\", \" To add a collection to a database, first navigate to the desired database's dashboard. In the database's dashboard, click the Add Collection button and choose your collection's name. For convenience, you can also set a custom ID for your collection instead of an auto-generated ID.\", \"You can manage your collections programmatically using the Appwrite CLI or one of Appwrite Server SDKs. You can manage documents with both the Server and Client SDKs.\"]}, {\"level\": 3, \"title\": \"Permissions\", \"body\": [\" Appwrite provides permissions to restrict access to documents at two levels, document and collection level. When a user has the appropriate type of access permissions granted at either the document or the collection level, they will be able to access or change the document. If the permission field is left empty, Client SDKs cannot access the document.\"]}, {\"level\": 4, \"title\": \"Document Level Permissions\", \"body\": [\"Document level permissions grant access to individual documents. Document level permissions are only applied if Document Security is enabled in the settings of your collection.\"]}, {\"level\": 4, \"title\": \"Collection Level Permissions\", \"body\": [\"Collection level permissions apply to every document in the collection.\"]}, {\"level\": 2, \"title\": \"Create Attributes\", \"body\": [\" Once you choose your permission model, navigate to your collection's Attributes tab. Attributes are used to define the structure of your documents and help the Appwrite API validate your users' input. Add your first attribute by clicking the Add Attribute button. You can choose between the following types:\", \"   Attribute Description     string String attribute.   integer Integer attribute.   float Float attribute.   boolean Boolean attribute.   enum Enum attribute.   ip IP address attribute for IPv4 and IPv6.   email Email address attribute.   url URL attribute.   relationship Relationship attribute relates one collection to another. Learn more about relationships.  \", \" If an attribute must be populated in all documents, set it as required. If not, you may optionally set a default value. Additionally, decide if the attribute should be a single value or an array of values.\", \" When adding or removing attributes, your requests are processed in the background, indicated by the attribute's status. Depending on your collection's size and other factors, this could take anywhere from a few seconds to a few minutes to complete. You are able to create a document while your attributes are still being processed, however you are not able to use the attributes on the documents until they are available.\"]}, {\"level\": 3, \"title\": \"Create Documents\", \"body\": [\" Navigate to the Documents tab of your collection and click the Add Document button, or add a document programmatically:\", \"  Web  import { Client, Databases, ID } from \\\"appwrite\\\";\\n\\nconst client = new Client()\\n    .setEndpoint('https://cloud.appwrite.io/v1')\\n    .setProject('[PROJECT_ID]');\\n\\nconst databases = new Databases(client);\\n\\nconst promise = databases.createDocument(\\n    '[DATABASE_ID]',\\n    '[COLLECTION_ID]',\\n    ID.unique(),\\n    {}\\n);\\n\\npromise.then(function (response) {\\n    console.log(response);\\n}, function (error) {\\n    console.log(error);\\n});    Flutter  import 'package:appwrite/appwrite.dart';\\n\\nvoid main() async {\\n    final client = Client()\\n        .setEndpoint('https://cloud.appwrite.io/v1')\\n        .setProject('[PROJECT_ID]');\\n\\n    final databases = Databases(client);\\n\\n    try {\\n        final document = databases.createDocument(\\n            databaseId: '[DATABASE_ID]',\\n            collectionId: '[COLLECTION_ID]',\\n            documentId: ID.unique(),\\n            data: {}\\n        );\\n    } on AppwriteException catch(e) {\\n        print(e);\\n    }\\n}    Android  import io.appwrite.Client\\nimport io.appwrite.services.Databases\\n\\nsuspend fun main() {\\n    val client = Client(applicationContext)\\n        .setEndpoint(\\\"https://cloud.appwrite.io/v1\\\")\\n        .setProject(\\\"[PROJECT_ID]\\\")\\n\\n    val databases = Databases(client)\\n\\n    try {\\n        val document = databases.createDocument(\\n            databaseId = \\\"[DATABASE_ID]\\\",\\n            collectionId = \\\"[COLLECTION_ID]\\\",\\n            documentId = ID.unique(),\\n            data = mapOf(\\\"a\\\" to \\\"b\\\"),\\n        )\\n    } catch (e: Exception) {\\n        Log.e(\\\"Appwrite\\\", \\\"Error: \\\" + e.message)\\n    }\\n}    Apple  import Appwrite\\nimport AppwriteModels\\n\\nfunc main() async throws {\\n    let client = Client()\\n        .setEndpoint(\\\"https://cloud.appwrite.io/v1\\\")\\n        .setProject(\\\"[PROJECT_ID]\\\")\\n\\n    let databases = Databases(client)\\n\\n    do {\\n        let document = try await databases.createDocument(\\n            databaseId: \\\"[DATABASE_ID]\\\",\\n            collectionId: \\\"[COLLECTION_ID]\\\",\\n            documentId: ID.unique(),\\n            data: [:]\\n        )\\n    } catch {\\n        print(error.localizedDescription)\\n    }\\n}    GraphQL  mutation {\\n    databasesCreateDocument(\\n        databaseId: \\\"[DATABASE_ID]\\\",\\n        collectionId: \\\"[COLLECTION_ID]\\\",\\n        documentId: \\\"[DOCUMENT_ID]\\\",\\n        data: \\\"{}\\\"\\n    ) {\\n        _id\\n        _collectionId\\n        _databaseId\\n        _createdAt\\n        _updatedAt\\n        _permissions\\n        data\\n    }\\n}  \"]}, {\"level\": 2, \"title\": \"Indexes\", \"body\": [\" Databases use indexes to quickly locate data without having to search through every document for matches. To ensure the best performance, Appwrite recommends an index for every attribute queried. You can create an index by navigating to your collection's Indexes tab or by using your favorite Server SDK. If you plan to query multiple attributes in a single query, creating an index with all queried attributes will yield optimal performance.\", \" The following indexes are currently supported:\", \"   Type Description     key Plain Index to allow queries.   unique Unique Index to disallow duplicates.   fulltext For searching within string attributes. Required for the search query method.  \"]}]", "metadata": {"source": "https://appwrite.io/docs/databases"}}