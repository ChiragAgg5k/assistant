{"page_content": "[{\"level\": 1, \"title\": \" Authentication \", \"body\": [\" Appwrite Authentication delivers more than just user sign up and log in. Authentication makes it easy to build secure and robust authentication with support for many different authentication methods.\", \" You can manage user accounts with user preferences, user labeling, or organizing users into teams. Combined with a robust permissions system, Appwrite Authentication provides everything you need to authenticate and manage users.\"]}, {\"level\": 2, \"title\": \"Getting Started\", \"body\": [\" Adding Appwrite Authentication to your apps can be as easy as these lines of code.\", \"  Web  import { Client, Account, ID } from \\\"appwrite\\\";\\n\\nconst client = new Client()\\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\\n    .setProject('[PROJECT_ID]');               // Your project ID\\n\\nconst account = new Account(client);\\n\\nconst user = await account.create(\\n    ID.unique(),\\n    'email@example.com',\\n    'password'\\n);    Flutter  import 'package:appwrite/appwrite.dart';\\n\\nfinal client = Client()\\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\\n    .setProject('[PROJECT_ID]');               // Your project ID\\n\\nfinal account = Account(client);\\n\\nfinal user = await account.create(\\n    userId: ID.unique(),\\n    email: 'email@example.com',\\n    password: 'password',\\n);   Android  import io.appwrite.Client\\nimport io.appwrite.services.Account\\nimport io.appwrite.ID\\n\\nval client = Client()\\n    .setEndpoint(\\\"https://cloud.appwrite.io/v1\\\") // Your API Endpoint\\n    .setProject(\\\"[PROJECT_ID]\\\")                // Your project ID\\n\\nval account = Account(client)\\n\\nval user = account.create(\\n    userId = ID.unique(),\\n    email = \\\"email@example.com\\\",\\n    password = \\\"password\\\"\\n)    Apple  import Appwrite\\n\\nlet client = Client()\\n    .setEndpoint(\\\"https://cloud.appwrite.io/v1\\\") // Your API Endpoint\\n    .setProject(\\\"[PROJECT_ID]\\\")                // Your project ID\\n\\nlet account = Account(client)\\n\\nlet user = try await account.create(\\n    userId: ID.unique(),\\n    email: \\\"email@example.com\\\",\\n    password: \\\"password\\\"\\n)    GraphQL  \\nmutation {\\n    accountCreate(userId: \\\"unique()\\\", email: \\\"email@example.com\\\", password: \\\"password\\\") {\\n        _id\\n        email\\n        name\\n    }\\n}  \", \" Use email and password authentication as a starting point and explore the many powerful features of Appwrite authentication.\"]}, {\"level\": 2, \"title\": \"Account vs Users API\", \"body\": [\" Appwrite has two auth APIs for different purposes, which are Account and Users. Here's how you choose between the two, depending on your needs.\"]}, {\"level\": 3, \"title\": \"Account API\", \"body\": [\" Use the Account API when acting on behalf of individual users when building client applications, like websites or mobile apps. The Account API is authenticated through secure cookies that store session information, so Appwrite knows which authenticated user is accessing data. The Account API is safe to expose to end users, because their access to data and resources is limited by Appwrite's permission system.\"]}, {\"level\": 3, \"title\": \"Users API\", \"body\": [\" Use the Users API when acting as an administrator in use cases like building admin consoles or server integrations. The Users API uses API keys to authenticate, which means Appwrite only knows which API key is accessing data. API keys don't respect permissions, which means they can access all data, and should never be shared with end users in client applications. The Users API also has batch operations, letting you query and manage users from an admin's perspective.\"]}]", "metadata": {"source": "http://167.172.175.165:2080/docs/authentication"}}