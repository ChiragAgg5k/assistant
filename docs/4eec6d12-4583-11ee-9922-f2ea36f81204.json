{"page_content": "[{\"level\": 1, \"title\": \" Queries \", \"body\": [\"Many list endpoints in Appwrite allow you to filter, sort, and paginate results using queries. Appwrite provides a common set of syntax to build queries.\"]}, {\"level\": 2, \"title\": \"Query Compatibility\", \"body\": [\"Each list endpoint supports different query operations. You can find the supported query methods and attributes in the References section of the Appwrite documentation.\"]}, {\"level\": 2, \"title\": \"Query Class\", \"body\": [\"Appwrite SDKs provide a Query class to help you build queries. The Query class has a method for each type of supported query.\", \"   Query Method SDK Method Example Description     Select Query.select([\\\"name\\\", \\\"title\\\"]) Select which attributes should be returned from a document.   Equal Query.equal(\\\"title\\\", [\\\"Iron Man\\\"]) Returns document if attribute is equal to any value in the provided array.   Not Equal Query.notEqual(\\\"title\\\", [\\\"Iron Man\\\"]) Returns document if attribute is not equal to any value in the provided array.   Less Than Query.lessThan(\\\"score\\\", 10) Returns document if attribute is less than the provided value.   Less Than or Equal Query.lessThanEqual(\\\"score\\\", 10) Returns document if attribute is less than or equal to the provided value.   Greater Than Query.greaterThan(\\\"score\\\", 10) Returns document if attribute is greater than the provided value.   Greater Than or Equal Query.greaterThanEqual(\\\"score\\\", 10) Returns document if attribute is greater than or equal to the provided value.   Between Query.between(\\\"price\\\", 5, 10) Returns document if attribute value falls between the two values. The boundary values are inclusive and can be strings or numbers.   Is Null Query.isNull(\\\"name\\\") Returns documents where attribute value is null.   Is Not Null Query.isNotNull(\\\"name\\\") Returns documents where attribute value is not null.   Starts With Query.startsWith(\\\"name\\\", \\\"Once upon a time\\\") Returns documents if a string attributes starts with a substring.   Ends With Query.endsWith(\\\"name\\\", \\\"happily ever after.\\\") Returns documents if a string attributes ends with a substring.   Search Query.search(\\\"text\\\", \\\"key words\\\") Searches string attributes for provided keywords. Requires a Full-text index on queried attributes.   Order Descending Query.orderDesc(\\\"attribute\\\") Orders results in descending order by attribute. Attribute must be indexed. Pass in an empty string to return in natural order.   Order Ascending Query.orderAsc(\\\"attribute\\\") Orders results in ascending order by attribute. Attribute must be indexed. Pass in an empty string to return in natural order.   Limit Query.limit(25) Limits the number of results returned by the query. Used for pagination. If the limit query is not used, the limit defaults to 25 results.   Offset Query.offset(0) Offset the results returned by skipping some of the results. Used for pagination.   Cursor After Query.cursorAfter(\\\"62a7...f620\\\") Places the cursor after the specified resource ID. Used for pagination.   Cursor Before Query.cursorBefore(\\\"62a7...a600\\\") Places the cursor before the specified resource ID. Used for pagination.  \"]}, {\"level\": 2, \"title\": \"Building Queries\", \"body\": [\" Queries are passed to an endpoint through the queries parameter as an array of query strings, which can be generated using the Query class.\", \"Each query method is logically separated via AND operations. For OR operation, pass multiple values into the query method separated by commas. For example Query.equal('title', ['Avatar', 'Lord of the Rings']) will fetch the movies \\\"Avatar\\\" or \\\"Lord of the Rings\\\".\", \"  Web  import { Client, Databases, Query } from \\\"appwrite\\\";\\n\\nconst client = new Client()\\n    .setEndpoint('https://cloud.appwrite.io/v1')\\n    .setProject('[PROJECT_ID]');\\n\\nconst databases = new Databases(client);\\n\\ndatabases.listDocuments(\\n    '[DATABASE_ID]',\\n    '[COLLECTION_ID]',\\n    [\\n        Query.equal('title', ['Avatar', 'Lord of the Rings']),\\n        Query.greaterThan('year', 1999)\\n    ]\\n);    Flutter  import 'package:appwrite/appwrite.dart';\\n\\nvoid main() async {\\n    final client = Client()\\n        .setEndpoint('https://cloud.appwrite.io/v1')\\n        .setProject('[PROJECT_ID]');\\n\\n    final databases = Databases(client);\\n\\n    try {\\n        final documents = await databases.listDocuments(\\n            '[DATABASE_ID]',\\n            '[COLLECTION_ID]',\\n            [\\n                Query.equal('title', ['Avatar', 'Lord of the Rings']),\\n                Query.greaterThan('year', 1999)\\n            ]\\n        );\\n    } on AppwriteException catch(e) {\\n        print(e);\\n    }\\n}    Android  import io.appwrite.Client\\nimport io.appwrite.Query\\nimport io.appwrite.services.Databases\\n\\nsuspend fun main() {\\n    val client = Client(applicationContext)\\n        .setEndpoint('https://cloud.appwrite.io/v1')\\n        .setProject('[PROJECT_ID]');\\n\\n    val databases = Databases(client)\\n\\n    try {\\n        val documents = databases.listDocuments(\\n            databaseId = \\\"[DATABASE_ID]\\\",\\n            collectionId = \\\"[COLLECTION_ID]\\\",\\n            queries = listOf(\\n                Query.equal(\\\"title\\\", listOf(\\\"Avatar\\\", \\\"Lord of the Rings\\\")),\\n                Query.greaterThan(\\\"year\\\", 1999)\\n            )\\n        )\\n    } catch (e: AppwriteException) {\\n        Log.e(\\\"Appwrite\\\", e.message)\\n    }\\n}    Apple  import Appwrite\\nimport AppwriteModels\\n\\nfunc main() async throws {\\n    let client = Client()\\n        .setEndpoint(\\\"https://cloud.appwrite.io/v1\\\")\\n        .setProject(\\\"[PROJECT_ID]\\\")\\n\\n    let databases = Databases(client)\\n\\n    do {\\n        let documents = try await databases.listDocuments(\\n            databaseId: \\\"[DATABASE_ID]\\\",\\n            collectionId: \\\"[COLLECTION_ID]\\\",\\n            queries: [\\n                Query.equal(\\\"title\\\", [\\\"Avatar\\\", \\\"Lord of the Rings\\\"]),\\n                Query.greaterThan(\\\"year\\\", 1999)\\n            ]\\n        )\\n    } catch {\\n        print(error.localizedDescription)\\n    }\\n}    GraphQL  query {\\n    databasesListDocuments(\\n        databaseId: \\\"[DATABASE_ID]\\\",\\n        collectionId: \\\"[COLLECTION_ID]\\\"\\n        queries: [\\\"equal(\\\\\\\"title\\\\\\\", [\\\\\\\"Avatar\\\\\\\", \\\\\\\"Lord of the Rings\\\\\\\"])\\\", \\\"greaterThan(\\\\\\\"year\\\\\\\", 1999)\\\"]\\n    ) {\\n        total\\n        documents {\\n            _id\\n            data\\n        }\\n    }\\n}  \"]}]", "metadata": {"source": "http://167.172.175.165:2080/docs/databases-queries"}}