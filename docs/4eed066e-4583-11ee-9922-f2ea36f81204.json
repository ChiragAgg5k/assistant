{"page_content": "[{\"level\": 1, \"title\": \" Execution \", \"body\": [\" Appwrite Functions can be executed in several ways. Executions can be invoked through the Appwrite SDK and visiting its REST endpoint. Functions can also be triggered by events and scheduled executions. Here are all the different ways to consume your Appwrite Functions.\"]}, {\"level\": 2, \"title\": \"Domains\", \"body\": [\" Each Appwrite function has its own domain. You can find this in the Appwrite Console, under the Function overview.\", \" The generated domains will look like this.\", \" https://64d4d22db370ae41a32e.appwrite.global\", \" Alternatively you can add a custom domain to your Appwrite Function. \"]}, {\"level\": 2, \"title\": \"REST API\", \"body\": [\" When requests are made to this domain, whether through a browser or through an HTTP requests, the request information like request URL, request headers, and request body will be passed to the function. This unlocks ability for Appwrite Function to become a full-blown API server on its own. It also allows accepting incoming webhooks for handling online payments, hosting social platform bots, and much more.\", \" curl -X POST https://64d4d22db370ae41a32e.appwrite.global \\\\\\n    -H \\\"X-Custom-Header: 123\\\" \\\\\\n    -H \\\"Content-Type: application/json\\\" \\\\\\n    -d '{\\\"data\\\":\\\"this is json data\\\"}'\"]}, {\"level\": 2, \"title\": \"SDK\", \"body\": [\" You can invoke your Appwrite Functions directly from the Appwrite SDKs.\", \"Learn more about using the Appwrite SDKs\"]}, {\"level\": 3, \"title\": \"Client SDKs\", \"body\": [\"  Web   import { Client, Functions } from 'appwrite';  \\n\\nconst client = new Client()\\n\\nclient\\n    .setEndpoint('https://cloud.appwrite.io/v1')\\n    .setProject('[PROJECT_ID]')\\n\\nconst functions = new Functions(client)\\n\\ntry {\\n    const data = await functions.createExecution('[FUNCTION_ID]', JSON.stringify({\\n        'foo': 'bar'\\n    }), '/', 'GET', {\\n      'X-Custom-Header': '123'\\n    })\\n    console.log(data)\\n} catch (err) {\\n    console.error(err.message)\\n}     Flutter   import 'package:appwrite/appwrite.dart';\\nimport 'dart:convert';\\n\\nfinal client = Client();\\nclient\\n    .setEndpoint('https://cloud.appwrite.io/v1')\\n    .setProject('[PROJECT_ID]')\\n\\nfinal functions = Functions(client);\\n\\ntry {\\n    final response = await functions.createExecution('[FUNCTION_ID]', json.encode({\\n        'foo': 'bar'\\n    }), '/', 'GET', {\\n        'X-Custom-Header': '123'\\n    });\\n    print(response.data);\\n} catch (e) {\\n    print(e.message);\\n}     Android   import io.appwrite.Client;\\nimport io.appwrite.services.Functions;\\nimport com.google.gson.Gson;\\n\\nval client = new Client();\\nclient\\n    .setEndpoint('https://cloud.appwrite.io/v1')\\n    .setProject('[PROJECT_ID]')\\n\\nval functions = new Functions(client);\\n\\ntry {\\n    val response = await functions.createExecution('[FUNCTION_ID]', gson.toString({\\n        'foo': 'bar'\\n    }), '/', 'GET', {\\n        'X-Custom-Header': '123'\\n    });\\n    print(response.data);\\n} catch (e) {\\n    print(e.message);\\n}     Apple   import Appwrite\\nimport Foundation\\n\\nlet client = Client()\\nclient\\n    .setEndpoint(\\\"https://cloud.appwrite.io/v1\\\")\\n    .setProject(\\\"[PROJECT_ID]\\\")\\n\\nlet functions = Functions(client: client)\\n\\ndo {\\n    let response = try functions.createExecution(\\n        functionId: \\\"[FUNCTION_ID]\\\",\\n        data: NSJSONSerialization.jsonObject(with: [\\\"foo\\\": \\\"bar\\\"], options: [])!,\\n        xpath: \\\"/\\\",\\n        method: \\\"GET\\\",\\n        headers: [\\n            \\\"X-Custom-Header\\\": \\\"123\\\"\\n        ]\\n    )\\n    print(response)\\n} catch let error {\\n    print(error)\\n}   \"]}, {\"level\": 3, \"title\": \"Server SDKs\", \"body\": [\"  Node.js   import { Client, Functions } from 'node-appwrite';  \\n\\nconst client = new Client()\\n\\nclient\\n    .setEndpoint('https://cloud.appwrite.io/v1')\\n    .setProject('[PROJECT_ID]')\\n    .setKey('[API_KEY]')\\n\\nconst functions = new Functions(client)\\n\\ntry {\\n    const data = await functions.createExecution('[FUNCTION_ID]', JSON.stringify({\\n        'foo': 'bar'\\n    }), '/', 'GET', {\\n        'X-Custom-Header': '123'\\n    })\\n    console.log(data)\\n} catch (err) {\\n    console.error(err.message)\\n}\\n\\n     PHP   <?php\\n\\nuse Appwrite\\\\Client;\\nuse Appwrite\\\\Services\\\\Functions;\\n\\n$client = new Client();\\n\\n$client\\n    ->setEndpoint('https://cloud.appwrite.io/v1')\\n    ->setProject('[PROJECT_ID]')\\n    ->setKey('[API_KEY]')\\n;\\n\\n$functions = new Functions($client);\\n\\n$result = $functions->createExecution('[FUNCTION_ID]', json_encode([\\n    'foo' => 'bar' \\n], '/', 'GET', [\\n    'X-Custom-Header': '123'\\n]);     Python   from appwrite.client import Client\\nfrom appwrite.services.functions import Functions\\nimport json\\n\\nclient = Client()\\n\\n(client\\n  .set_endpoint('https://cloud.appwrite.io/v1')\\n  .set_project('[PROJECT_ID]')\\n  .set_key('[API_KEY]')\\n)\\n\\nfunctions = Functions(client)\\n\\nresult = functions.create_execution('[FUNCTION_ID]', json.dumps({\\n    'foo': 'bar'\\n}, '/', 'GET', {\\n    'X-Custom-Header': '123'\\n})     Ruby   require 'Appwrite'\\nrequire 'json'\\n\\ninclude Appwrite\\n\\nclient = Client.new\\n    .set_endpoint('https://cloud.appwrite.io/v1') \\n    .set_project('[PROJECT_ID]') \\n    .set_key('[API_KEY]') \\n\\nfunctions = Functions.new(client)\\n\\nresponse = functions.create_execution(function_id: '[FUNCTION_ID]', data: JSON.generate({\\n    'foo': 'bar'\\n}), '/', 'GET', {\\n    'X-Custom-Header': '123'\\n})\\n\\nputs response.inspect     Deno   import { Client, Functions } from \\\"https://deno.land/x/appwrite/mod.ts\\\";\\n\\nconst client = new Client()\\n\\nclient\\n    .setEndpoint('https://cloud.appwrite.io/v1') \\n    .setProject('[PROJECT_ID]')\\n    .setKey('[API_KEY]')\\n\\nconst functions = new Functions(client)\\n\\ntry {\\n    const data = await functions.createExecution('[FUNCTION_ID]', JSON.stringify({\\n        'foo': 'bar'\\n    }), '/', 'GET', {\\n        'X-Custom-Header': '123'\\n    })\\n    console.log(data)\\n} catch (err) {\\n    console.error(err.message)\\n}     Dart   import 'package:dart_appwrite/dart_appwrite.dart';\\nimport 'dart:convert';\\n\\nvoid main() {\\n  Client client = Client();\\n  Functions functions = Functions(client);\\n\\n  client\\n    .setEndpoint('https://cloud.appwrite.io/v1')\\n    .setProject('[PROJECT_ID]')\\n    .setKey('[API_KEY]')\\n  ;\\n\\n  Future result = functions.createExecution(\\n    functionId: '[FUNCTION_ID]',\\n    data: json.encode({\\n      'foo': 'bar'\\n    }),\\n    xpath: '/',\\n    method: 'GET',\\n    headers: {\\n        'X-Custom-Header': '123'\\n    }\\n  );\\n\\n  result\\n    .then((response) {\\n      print(response);\\n    }).catchError((error) {\\n      print(error.response);\\n  });\\n}     Swift   import Appwrite\\nimport Foundation\\n\\nlet client = Client()\\n    .setEndpoint(\\\"https://cloud.appwrite.io/v1\\\")\\n    .setProject(\\\"[PROJECT_ID]\\\")\\n    .setKey(\\\"[API_KEY]\\\")\\n\\nlet functions = Functions(client)\\n\\nlet execution = try await functions.createExecution(\\n    functionId: \\\"[FUNCTION_ID]\\\",\\n    data: NSJSONSerialization.jsonObject(with: [\\n        \\\"foo\\\": \\\"bar\\\"\\n    ], options: [])!),\\n    xpath: '/',\\n    method: 'GET',\\n    headers: [\\n        \\\"X-Custom-Header\\\": \\\"123\\\"\\n])     .NET   using Appwrite;\\nusing Appwrite.Services;\\nusing Appwrite.Models;\\nusing System.Text.Json;\\n\\nvar client = new Client()\\n    .SetEndPoint(\\\"https://cloud.appwrite.io/v1\\\")\\n    .SetProject(\\\"[PROJECT_ID]\\\")\\n    .SetKey(\\\"[API_KEY]\\\");\\n\\nvar functions = new Functions(client);\\n\\nExecution result = await functions.CreateExecution(\\n    functionId: \\\"[FUNCTION_ID]\\\",\\n    data: JsonSerializer.Serialize<object>(new Dictionary<string, object> {\\n        { \\\"foo\\\", \\\"bar\\\" }\\n    }),\\n    xpath: \\\"/\\\",\\n    method: \\\"GET\\\",\\n    headers: new Dictionary<string, object> {\\n        { \\\"X-Custom-Header\\\", \\\"123\\\" }\\n});     Kotlin   import io.appwrite.Client\\nimport io.appwrite.services.Functions\\nimport com.google.gson.Gson\\n\\nfun main(args: Array<String>) {\\n    val client = Client(context)\\n        .setEndpoint(\\\"https://cloud.appwrite.io/v1\\\")\\n        .setProject(\\\"[PROJECT_ID]\\\")\\n        .setKey(\\\"[API_KEY]\\\")\\n\\n    val functions = Functions(client)\\n\\n    val response = functions.createExecution(\\n        functionId = \\\"[FUNCTION_ID]\\\",\\n        data = gson.toString(mapOf(\\n            \\\"foo\\\" to \\\"bar\\\"\\n        )),\\n        xpath = \\\"/\\\",\\n        method = \\\"GET\\\",\\n        headers = mapOf(\\n            \\\"X-Custom-Header\\\" to \\\"123\\\"\\n        )\\n    )\\n}\\n\\n     Java   import io.appwrite.Client;\\nimport io.appwrite.services.Functions;\\nimport java.util.HashMap;\\nimport com.google.gson.Gson;\\n\\npublic static void main(String[] args) throws Exception {\\n    Client client = new Client()\\n        .setEndpoint(\\\"https://cloud.appwrite.io/v1\\\")\\n        .setProject(\\\"[PROJECT_ID]\\\")\\n        .setKey(\\\"[API_KEY]\\\");\\n\\n    Functions functions = new Functions(client);\\n\\n    functions.createExecution(\\n        \\\"[FUNCTION_ID]\\\",\\n        new CoroutineCallback<>((result, error) -> {\\n            if (error != null) {\\n                error.printStackTrace();\\n                return;\\n            }\\n\\n            System.out.println(result);\\n        }),\\n        gson.toString(new HashMap() {{\\n            put(\\\"foo\\\", \\\"bar\\\");\\n        }}),\\n        \\\"/\\\",\\n        \\\"GET\\\",\\n        new HashMap() {{\\n            put(\\\"X-Custom-Header\\\", \\\"123\\\");\\n        }},\\n    );\\n}   \"]}, {\"level\": 2, \"title\": \"Console\", \"body\": [\" Another easy way to test a function is directly in the Appwrite Console. You test a function by hitting the Execute now button, which will display with modal below. You'll be able to mock executions by configuring the path, method, headers, and body.\", \"     \\\"Execute Function\\\" modal. \"]}, {\"level\": 2, \"title\": \"Events\", \"body\": [\" Changes in Appwrite emit events. You can configure Functions to be executed in response to these events.\", \" In Appwrite Console, navigate to Functions. Click to open a function you wish to configure.Under the Settings tab, navigate to Events. Add one or multiple events as triggers for the function.  Be careful to avoid selecting events that can be caused by the function itself. This can cause the function to trigger its own execution, resulting in infinite recursions. \"]}, {\"level\": 2, \"title\": \"Schedule\", \"body\": [\"Appwrite supports scheduled function executions. You can schedule executions using cron expressions in the settings of your function. Cron supports recurring executions as frequently as every minute.\", \"Here are some cron expressions for common intervals.\", \"   Cron Expression Schedule     */15 * * * * Every 15 minutes   0 * * * * Every Hour   0 0 * * * Every day at 00:00   0 0 * * 1 Every monday at 00:00  \"]}, {\"level\": 2, \"title\": \"Permissions\", \"body\": [\" Appwrite Functions can be executed using Client or Server SDKs. Client SDKs must be authenticated with an account that has been granted execution permissions on the function's settings page. Server SDKs require an API key with the correct scopes.\", \" If your function has a generated or custom domain, executions are not authenticated. Anyone visiting the configured domains will be considered a guest, so make sure to give `Any` execute permission in order for domain executions to work. If you need to enforce permissions for functions with a domain, use authentication methods like JWT.\"]}]", "metadata": {"source": "http://167.172.175.165:2080/docs/functions-execute"}}